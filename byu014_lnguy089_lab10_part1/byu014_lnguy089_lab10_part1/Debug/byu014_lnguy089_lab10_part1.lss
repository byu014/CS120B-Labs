
byu014_lnguy089_lab10_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000031c  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800104  00800104  000003b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aee  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e3  00000000  00000000  00000f72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c6  00000000  00000000  00001855  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00001c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000569  00000000  00000000  00001d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f2  00000000  00000000  00002291  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002483  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	f5 c0       	rjmp	.+490    	; 0x220 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e1       	ldi	r30, 0x1C	; 28
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 32       	cpi	r26, 0x2E	; 46
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	fc d0       	rcall	.+504    	; 0x2bc <main>
  c4:	29 c1       	rjmp	.+594    	; 0x318 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TickFct_ThreeLEDS>:
	SREG |= 0x80;
}

void TimerOff()
{
	TimerFlag = 1;
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	21 f0       	breq	.+8      	; 0xd4 <TickFct_ThreeLEDS+0xc>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	91 05       	cpc	r25, r1
  d0:	39 f0       	breq	.+14     	; 0xe0 <TickFct_ThreeLEDS+0x18>
  d2:	08 95       	ret
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <threeLEDs>
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	08 95       	ret
  e0:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <threeLEDs>
  e4:	24 30       	cpi	r18, 0x04	; 4
  e6:	21 f4       	brne	.+8      	; 0xf0 <TickFct_ThreeLEDS+0x28>
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <threeLEDs>
  ee:	08 95       	ret
  f0:	22 0f       	add	r18, r18
  f2:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <threeLEDs>
  f6:	08 95       	ret

000000f8 <TickFct_BLEDS>:
  f8:	00 97       	sbiw	r24, 0x00	; 0
  fa:	21 f0       	breq	.+8      	; 0x104 <TickFct_BLEDS+0xc>
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	91 05       	cpc	r25, r1
 100:	39 f0       	breq	.+14     	; 0x110 <TickFct_BLEDS+0x18>
 102:	08 95       	ret
 104:	88 e0       	ldi	r24, 0x08	; 8
 106:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	08 95       	ret
 110:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 114:	26 95       	lsr	r18
 116:	26 95       	lsr	r18
 118:	26 95       	lsr	r18
 11a:	11 f0       	breq	.+4      	; 0x120 <TickFct_BLEDS+0x28>
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	01 c0       	rjmp	.+2      	; 0x122 <TickFct_BLEDS+0x2a>
 120:	28 e0       	ldi	r18, 0x08	; 8
 122:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
 126:	08 95       	ret

00000128 <TickFct_Combine>:
 128:	00 97       	sbiw	r24, 0x00	; 0
 12a:	31 f4       	brne	.+12     	; 0x138 <TickFct_Combine+0x10>
 12c:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <threeLEDs>
 130:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 134:	23 0f       	add	r18, r19
 136:	25 b9       	out	0x05, r18	; 5
 138:	08 95       	ret

0000013a <TimerOn>:
 13a:	8b e0       	ldi	r24, 0x0B	; 11
 13c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 140:	8d e7       	ldi	r24, 0x7D	; 125
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 148:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 152:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 156:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 162:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 166:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 16a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 16e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 172:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 176:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 17a:	8f b7       	in	r24, 0x3f	; 63
 17c:	80 68       	ori	r24, 0x80	; 128
 17e:	8f bf       	out	0x3f, r24	; 63
 180:	08 95       	ret

00000182 <TimerSet>:



void TimerSet(unsigned long M)
{
	_avr_timer_M = M;
 182:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 186:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 18a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 18e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 192:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_cntcurr>
 196:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_cntcurr+0x1>
 19a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr+0x2>
 19e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x3>
 1a2:	08 95       	ret

000001a4 <TimerISR>:
}

void TimerISR()
{
 1a4:	ef 92       	push	r14
 1a6:	ff 92       	push	r15
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	ca e0       	ldi	r28, 0x0A	; 10
 1b2:	d1 e0       	ldi	r29, 0x01	; 1
 1b4:	0f 2e       	mov	r0, r31
 1b6:	fe e2       	ldi	r31, 0x2E	; 46
 1b8:	ef 2e       	mov	r14, r31
 1ba:	f1 e0       	ldi	r31, 0x01	; 1
 1bc:	ff 2e       	mov	r15, r31
 1be:	f0 2d       	mov	r31, r0
 1c0:	8e 01       	movw	r16, r28
	unsigned char i;
	for(i = 0; i < tasksNum; ++i)
	{
		if(tasks[i].elapsedTime >= tasks[i].period)
 1c2:	4e 81       	ldd	r20, Y+6	; 0x06
 1c4:	5f 81       	ldd	r21, Y+7	; 0x07
 1c6:	68 85       	ldd	r22, Y+8	; 0x08
 1c8:	79 85       	ldd	r23, Y+9	; 0x09
 1ca:	8a 81       	ldd	r24, Y+2	; 0x02
 1cc:	9b 81       	ldd	r25, Y+3	; 0x03
 1ce:	ac 81       	ldd	r26, Y+4	; 0x04
 1d0:	bd 81       	ldd	r27, Y+5	; 0x05
 1d2:	48 17       	cp	r20, r24
 1d4:	59 07       	cpc	r21, r25
 1d6:	6a 07       	cpc	r22, r26
 1d8:	7b 07       	cpc	r23, r27
 1da:	58 f0       	brcs	.+22     	; 0x1f2 <TimerISR+0x4e>
		{
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 1dc:	ea 85       	ldd	r30, Y+10	; 0x0a
 1de:	fb 85       	ldd	r31, Y+11	; 0x0b
 1e0:	88 81       	ld	r24, Y
 1e2:	99 81       	ldd	r25, Y+1	; 0x01
 1e4:	09 95       	icall
 1e6:	99 83       	std	Y+1, r25	; 0x01
 1e8:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 1ea:	1e 82       	std	Y+6, r1	; 0x06
 1ec:	1f 82       	std	Y+7, r1	; 0x07
 1ee:	18 86       	std	Y+8, r1	; 0x08
 1f0:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += 1;
 1f2:	f8 01       	movw	r30, r16
 1f4:	86 81       	ldd	r24, Z+6	; 0x06
 1f6:	97 81       	ldd	r25, Z+7	; 0x07
 1f8:	a0 85       	ldd	r26, Z+8	; 0x08
 1fa:	b1 85       	ldd	r27, Z+9	; 0x09
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	a1 1d       	adc	r26, r1
 200:	b1 1d       	adc	r27, r1
 202:	86 83       	std	Z+6, r24	; 0x06
 204:	97 83       	std	Z+7, r25	; 0x07
 206:	a0 87       	std	Z+8, r26	; 0x08
 208:	b1 87       	std	Z+9, r27	; 0x09
 20a:	2c 96       	adiw	r28, 0x0c	; 12
}

void TimerISR()
{
	unsigned char i;
	for(i = 0; i < tasksNum; ++i)
 20c:	ce 15       	cp	r28, r14
 20e:	df 05       	cpc	r29, r15
 210:	b9 f6       	brne	.-82     	; 0x1c0 <TimerISR+0x1c>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += 1;
	}
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	08 95       	ret

00000220 <__vector_13>:

ISR(TIMER1_COMPA_vect) {
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	0b b6       	in	r0, 0x3b	; 59
 22c:	0f 92       	push	r0
 22e:	2f 93       	push	r18
 230:	3f 93       	push	r19
 232:	4f 93       	push	r20
 234:	5f 93       	push	r21
 236:	6f 93       	push	r22
 238:	7f 93       	push	r23
 23a:	8f 93       	push	r24
 23c:	9f 93       	push	r25
 23e:	af 93       	push	r26
 240:	bf 93       	push	r27
 242:	ef 93       	push	r30
 244:	ff 93       	push	r31
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 246:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_cntcurr>
 24a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x1>
 24e:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x2>
 252:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x3>
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	a1 09       	sbc	r26, r1
 25a:	b1 09       	sbc	r27, r1
 25c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 260:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 264:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 268:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 26c:	89 2b       	or	r24, r25
 26e:	8a 2b       	or	r24, r26
 270:	8b 2b       	or	r24, r27
 272:	89 f4       	brne	.+34     	; 0x296 <__vector_13+0x76>
		TimerISR(); // Call the ISR that the user uses
 274:	97 df       	rcall	.-210    	; 0x1a4 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 276:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 27a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 27e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 282:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 286:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 28a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 28e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 292:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
	}
}
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	7f 91       	pop	r23
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	3f 91       	pop	r19
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0b be       	out	0x3b, r0	; 59
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <main>:


int main(void)
{
    /* Replace with your application code */
	DDRB = 0xFF; PORTB = 0x00;
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	84 b9       	out	0x04, r24	; 4
 2c0:	15 b8       	out	0x05, r1	; 5
	unsigned char i = 0;
	tasks[i].state = ThreeLEDS_Start;
 2c2:	ea e0       	ldi	r30, 0x0A	; 10
 2c4:	f1 e0       	ldi	r31, 0x01	; 1
 2c6:	11 82       	std	Z+1, r1	; 0x01
 2c8:	10 82       	st	Z, r1
	tasks[i].period = 1000;
 2ca:	88 ee       	ldi	r24, 0xE8	; 232
 2cc:	93 e0       	ldi	r25, 0x03	; 3
 2ce:	a0 e0       	ldi	r26, 0x00	; 0
 2d0:	b0 e0       	ldi	r27, 0x00	; 0
 2d2:	82 83       	std	Z+2, r24	; 0x02
 2d4:	93 83       	std	Z+3, r25	; 0x03
 2d6:	a4 83       	std	Z+4, r26	; 0x04
 2d8:	b5 83       	std	Z+5, r27	; 0x05
	tasks[i].TickFct = &TickFct_ThreeLEDS;
 2da:	24 e6       	ldi	r18, 0x64	; 100
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	33 87       	std	Z+11, r19	; 0x0b
 2e0:	22 87       	std	Z+10, r18	; 0x0a
	i++;
	tasks[i].state = BLEDS_Start;
 2e2:	15 86       	std	Z+13, r1	; 0x0d
 2e4:	14 86       	std	Z+12, r1	; 0x0c
	tasks[i].period = 1000;
 2e6:	86 87       	std	Z+14, r24	; 0x0e
 2e8:	97 87       	std	Z+15, r25	; 0x0f
 2ea:	a0 8b       	std	Z+16, r26	; 0x10
 2ec:	b1 8b       	std	Z+17, r27	; 0x11
	tasks[i].TickFct = &TickFct_BLEDS;
 2ee:	2c e7       	ldi	r18, 0x7C	; 124
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	37 8b       	std	Z+23, r19	; 0x17
 2f4:	26 8b       	std	Z+22, r18	; 0x16
	i++;
	tasks[i].state = Combine_Start;
 2f6:	11 8e       	std	Z+25, r1	; 0x19
 2f8:	10 8e       	std	Z+24, r1	; 0x18
	tasks[i].period = 1000;
 2fa:	82 8f       	std	Z+26, r24	; 0x1a
 2fc:	93 8f       	std	Z+27, r25	; 0x1b
 2fe:	a4 8f       	std	Z+28, r26	; 0x1c
 300:	b5 8f       	std	Z+29, r27	; 0x1d
	tasks[i].TickFct = &TickFct_Combine;
 302:	84 e9       	ldi	r24, 0x94	; 148
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	93 a3       	std	Z+35, r25	; 0x23
 308:	82 a3       	std	Z+34, r24	; 0x22
	
	TimerSet(1);
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	37 df       	rcall	.-402    	; 0x182 <TimerSet>
	TimerOn();
 314:	12 df       	rcall	.-476    	; 0x13a <TimerOn>
 316:	ff cf       	rjmp	.-2      	; 0x316 <main+0x5a>

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
