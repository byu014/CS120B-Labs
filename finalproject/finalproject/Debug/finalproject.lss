
finalproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000986  00000a3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000986  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800110  00800110  00000a4a  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  00000a4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000a4b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a7c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000e0  00000000  00000000  00000ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000d5f  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000914  00000000  00000000  000018ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000874  00000000  00000000  00002213  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000028c  00000000  00000000  00002a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000568  00000000  00000000  00002d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000564  00000000  00000000  0000327c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000090  00000000  00000000  000037e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7b c3       	rjmp	.+1782   	; 0x72c <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e8       	ldi	r30, 0x86	; 134
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 32       	cpi	r26, 0x21	; 33
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e1 d3       	rcall	.+1986   	; 0x886 <main>
  c4:	5e c4       	rjmp	.+2236   	; 0x982 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_ClearScreen>:
}

void TimerOff()
{
	TimerFlag = 1;
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	1a d0       	rcall	.+52     	; 0x108 <LCD_WriteCommand>
  d4:	00 00       	nop
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <LCD_init>:
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	84 e6       	ldi	r24, 0x64	; 100
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	ac d0       	rcall	.+344    	; 0x242 <delay_ms>
  ea:	88 e3       	ldi	r24, 0x38	; 56
  ec:	0d d0       	rcall	.+26     	; 0x108 <LCD_WriteCommand>
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	0b d0       	rcall	.+22     	; 0x108 <LCD_WriteCommand>
  f2:	8f e0       	ldi	r24, 0x0F	; 15
  f4:	09 d0       	rcall	.+18     	; 0x108 <LCD_WriteCommand>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	07 d0       	rcall	.+14     	; 0x108 <LCD_WriteCommand>
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	a1 d0       	rcall	.+322    	; 0x242 <delay_ms>
 100:	00 00       	nop
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <LCD_WriteCommand>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	89 83       	std	Y+1, r24	; 0x01
 114:	82 e2       	ldi	r24, 0x22	; 34
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	22 e2       	ldi	r18, 0x22	; 34
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	2e 7f       	andi	r18, 0xFE	; 254
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
 126:	8b e2       	ldi	r24, 0x2B	; 43
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	29 81       	ldd	r18, Y+1	; 0x01
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
 130:	82 e2       	ldi	r24, 0x22	; 34
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	22 e2       	ldi	r18, 0x22	; 34
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	22 60       	ori	r18, 0x02	; 2
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
 142:	00 00       	nop
 144:	82 e2       	ldi	r24, 0x22	; 34
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	22 e2       	ldi	r18, 0x22	; 34
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	2d 7f       	andi	r18, 0xFD	; 253
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	73 d0       	rcall	.+230    	; 0x242 <delay_ms>
 15c:	00 00       	nop
 15e:	0f 90       	pop	r0
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <LCD_WriteData>:
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	1f 92       	push	r1
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	89 83       	std	Y+1, r24	; 0x01
 172:	82 e2       	ldi	r24, 0x22	; 34
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	22 e2       	ldi	r18, 0x22	; 34
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	f9 01       	movw	r30, r18
 17c:	20 81       	ld	r18, Z
 17e:	21 60       	ori	r18, 0x01	; 1
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
 184:	8b e2       	ldi	r24, 0x2B	; 43
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	29 81       	ldd	r18, Y+1	; 0x01
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
 18e:	82 e2       	ldi	r24, 0x22	; 34
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	22 e2       	ldi	r18, 0x22	; 34
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	20 81       	ld	r18, Z
 19a:	22 60       	ori	r18, 0x02	; 2
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18
 1a0:	00 00       	nop
 1a2:	82 e2       	ldi	r24, 0x22	; 34
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	22 e2       	ldi	r18, 0x22	; 34
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	20 81       	ld	r18, Z
 1ae:	2d 7f       	andi	r18, 0xFD	; 253
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	44 d0       	rcall	.+136    	; 0x242 <delay_ms>
 1ba:	00 00       	nop
 1bc:	0f 90       	pop	r0
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <LCD_DisplayString>:
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <LCD_DisplayString+0x6>
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <LCD_DisplayString+0x8>
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	8a 83       	std	Y+2, r24	; 0x02
 1d2:	7c 83       	std	Y+4, r23	; 0x04
 1d4:	6b 83       	std	Y+3, r22	; 0x03
 1d6:	78 df       	rcall	.-272    	; 0xc8 <LCD_ClearScreen>
 1d8:	8a 81       	ldd	r24, Y+2	; 0x02
 1da:	89 83       	std	Y+1, r24	; 0x01
 1dc:	0f c0       	rjmp	.+30     	; 0x1fc <LCD_DisplayString+0x38>
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	98 0f       	add	r25, r24
 1e4:	99 83       	std	Y+1, r25	; 0x01
 1e6:	18 d0       	rcall	.+48     	; 0x218 <LCD_Cursor>
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	9c 81       	ldd	r25, Y+4	; 0x04
 1ec:	9c 01       	movw	r18, r24
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	3f 4f       	sbci	r19, 0xFF	; 255
 1f2:	3c 83       	std	Y+4, r19	; 0x04
 1f4:	2b 83       	std	Y+3, r18	; 0x03
 1f6:	fc 01       	movw	r30, r24
 1f8:	80 81       	ld	r24, Z
 1fa:	b5 df       	rcall	.-150    	; 0x166 <LCD_WriteData>
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	9c 81       	ldd	r25, Y+4	; 0x04
 200:	fc 01       	movw	r30, r24
 202:	80 81       	ld	r24, Z
 204:	88 23       	and	r24, r24
 206:	59 f7       	brne	.-42     	; 0x1de <LCD_DisplayString+0x1a>
 208:	00 00       	nop
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <LCD_Cursor>:
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	1f 92       	push	r1
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	89 83       	std	Y+1, r24	; 0x01
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	81 31       	cpi	r24, 0x11	; 17
 228:	20 f4       	brcc	.+8      	; 0x232 <LCD_Cursor+0x1a>
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	81 58       	subi	r24, 0x81	; 129
 22e:	6c df       	rcall	.-296    	; 0x108 <LCD_WriteCommand>
 230:	03 c0       	rjmp	.+6      	; 0x238 <LCD_Cursor+0x20>
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	81 55       	subi	r24, 0x51	; 81
 236:	68 df       	rcall	.-304    	; 0x108 <LCD_WriteCommand>
 238:	00 00       	nop
 23a:	0f 90       	pop	r0
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <delay_ms>:
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	00 d0       	rcall	.+0      	; 0x248 <delay_ms+0x6>
 248:	00 d0       	rcall	.+0      	; 0x24a <delay_ms+0x8>
 24a:	00 d0       	rcall	.+0      	; 0x24c <delay_ms+0xa>
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	9e 83       	std	Y+6, r25	; 0x06
 252:	8d 83       	std	Y+5, r24	; 0x05
 254:	1a 82       	std	Y+2, r1	; 0x02
 256:	19 82       	std	Y+1, r1	; 0x01
 258:	13 c0       	rjmp	.+38     	; 0x280 <delay_ms+0x3e>
 25a:	1c 82       	std	Y+4, r1	; 0x04
 25c:	1b 82       	std	Y+3, r1	; 0x03
 25e:	06 c0       	rjmp	.+12     	; 0x26c <delay_ms+0x2a>
 260:	00 00       	nop
 262:	8b 81       	ldd	r24, Y+3	; 0x03
 264:	9c 81       	ldd	r25, Y+4	; 0x04
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	9c 83       	std	Y+4, r25	; 0x04
 26a:	8b 83       	std	Y+3, r24	; 0x03
 26c:	8b 81       	ldd	r24, Y+3	; 0x03
 26e:	9c 81       	ldd	r25, Y+4	; 0x04
 270:	87 30       	cpi	r24, 0x07	; 7
 272:	93 40       	sbci	r25, 0x03	; 3
 274:	ac f3       	brlt	.-22     	; 0x260 <delay_ms+0x1e>
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	9a 81       	ldd	r25, Y+2	; 0x02
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	9a 83       	std	Y+2, r25	; 0x02
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	29 81       	ldd	r18, Y+1	; 0x01
 282:	3a 81       	ldd	r19, Y+2	; 0x02
 284:	8d 81       	ldd	r24, Y+5	; 0x05
 286:	9e 81       	ldd	r25, Y+6	; 0x06
 288:	28 17       	cp	r18, r24
 28a:	39 07       	cpc	r19, r25
 28c:	34 f3       	brlt	.-52     	; 0x25a <delay_ms+0x18>
 28e:	00 00       	nop
 290:	26 96       	adiw	r28, 0x06	; 6
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <SetBit>:
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <SetBit+0x6>
 2a8:	1f 92       	push	r1
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	89 83       	std	Y+1, r24	; 0x01
 2b0:	6a 83       	std	Y+2, r22	; 0x02
 2b2:	4b 83       	std	Y+3, r20	; 0x03
 2b4:	8b 81       	ldd	r24, Y+3	; 0x03
 2b6:	88 23       	and	r24, r24
 2b8:	71 f0       	breq	.+28     	; 0x2d6 <SetBit+0x34>
 2ba:	8a 81       	ldd	r24, Y+2	; 0x02
 2bc:	28 2f       	mov	r18, r24
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <SetBit+0x28>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	2a 95       	dec	r18
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <SetBit+0x24>
 2ce:	98 2f       	mov	r25, r24
 2d0:	89 81       	ldd	r24, Y+1	; 0x01
 2d2:	89 2b       	or	r24, r25
 2d4:	0e c0       	rjmp	.+28     	; 0x2f2 <SetBit+0x50>
 2d6:	8a 81       	ldd	r24, Y+2	; 0x02
 2d8:	28 2f       	mov	r18, r24
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <SetBit+0x44>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	2a 95       	dec	r18
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <SetBit+0x40>
 2ea:	98 2f       	mov	r25, r24
 2ec:	90 95       	com	r25
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	89 23       	and	r24, r25
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <GetBit>:
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	00 d0       	rcall	.+0      	; 0x304 <GetBit+0x6>
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	89 83       	std	Y+1, r24	; 0x01
 30a:	6a 83       	std	Y+2, r22	; 0x02
 30c:	8a 81       	ldd	r24, Y+2	; 0x02
 30e:	28 2f       	mov	r18, r24
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 c0       	rjmp	.+4      	; 0x31c <GetBit+0x1e>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	2a 95       	dec	r18
 31e:	e2 f7       	brpl	.-8      	; 0x318 <GetBit+0x1a>
 320:	98 2f       	mov	r25, r24
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	89 23       	and	r24, r25
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <GetKeypadKey>:
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
 33c:	08 e2       	ldi	r16, 0x28	; 40
 33e:	10 e0       	ldi	r17, 0x00	; 0
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	64 e0       	ldi	r22, 0x04	; 4
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	ad df       	rcall	.-166    	; 0x2a2 <SetBit>
 348:	f8 01       	movw	r30, r16
 34a:	80 83       	st	Z, r24
 34c:	00 00       	nop
 34e:	86 e2       	ldi	r24, 0x26	; 38
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	fc 01       	movw	r30, r24
 354:	80 81       	ld	r24, Z
 356:	80 95       	com	r24
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	d1 df       	rcall	.-94     	; 0x2fe <GetBit>
 35c:	88 23       	and	r24, r24
 35e:	11 f0       	breq	.+4      	; 0x364 <GetKeypadKey+0x34>
 360:	81 e3       	ldi	r24, 0x31	; 49
 362:	c1 c0       	rjmp	.+386    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 364:	86 e2       	ldi	r24, 0x26	; 38
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	fc 01       	movw	r30, r24
 36a:	80 81       	ld	r24, Z
 36c:	80 95       	com	r24
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	c6 df       	rcall	.-116    	; 0x2fe <GetBit>
 372:	88 23       	and	r24, r24
 374:	11 f0       	breq	.+4      	; 0x37a <GetKeypadKey+0x4a>
 376:	84 e3       	ldi	r24, 0x34	; 52
 378:	b6 c0       	rjmp	.+364    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 37a:	86 e2       	ldi	r24, 0x26	; 38
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	fc 01       	movw	r30, r24
 380:	80 81       	ld	r24, Z
 382:	80 95       	com	r24
 384:	62 e0       	ldi	r22, 0x02	; 2
 386:	bb df       	rcall	.-138    	; 0x2fe <GetBit>
 388:	88 23       	and	r24, r24
 38a:	11 f0       	breq	.+4      	; 0x390 <GetKeypadKey+0x60>
 38c:	87 e3       	ldi	r24, 0x37	; 55
 38e:	ab c0       	rjmp	.+342    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 390:	86 e2       	ldi	r24, 0x26	; 38
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	fc 01       	movw	r30, r24
 396:	80 81       	ld	r24, Z
 398:	80 95       	com	r24
 39a:	63 e0       	ldi	r22, 0x03	; 3
 39c:	b0 df       	rcall	.-160    	; 0x2fe <GetBit>
 39e:	88 23       	and	r24, r24
 3a0:	11 f0       	breq	.+4      	; 0x3a6 <GetKeypadKey+0x76>
 3a2:	8a e2       	ldi	r24, 0x2A	; 42
 3a4:	a0 c0       	rjmp	.+320    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 3a6:	08 e2       	ldi	r16, 0x28	; 40
 3a8:	10 e0       	ldi	r17, 0x00	; 0
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	65 e0       	ldi	r22, 0x05	; 5
 3ae:	8f ef       	ldi	r24, 0xFF	; 255
 3b0:	78 df       	rcall	.-272    	; 0x2a2 <SetBit>
 3b2:	f8 01       	movw	r30, r16
 3b4:	80 83       	st	Z, r24
 3b6:	00 00       	nop
 3b8:	86 e2       	ldi	r24, 0x26	; 38
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	fc 01       	movw	r30, r24
 3be:	80 81       	ld	r24, Z
 3c0:	80 95       	com	r24
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	9c df       	rcall	.-200    	; 0x2fe <GetBit>
 3c6:	88 23       	and	r24, r24
 3c8:	11 f0       	breq	.+4      	; 0x3ce <GetKeypadKey+0x9e>
 3ca:	82 e3       	ldi	r24, 0x32	; 50
 3cc:	8c c0       	rjmp	.+280    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 3ce:	86 e2       	ldi	r24, 0x26	; 38
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	fc 01       	movw	r30, r24
 3d4:	80 81       	ld	r24, Z
 3d6:	80 95       	com	r24
 3d8:	61 e0       	ldi	r22, 0x01	; 1
 3da:	91 df       	rcall	.-222    	; 0x2fe <GetBit>
 3dc:	88 23       	and	r24, r24
 3de:	11 f0       	breq	.+4      	; 0x3e4 <GetKeypadKey+0xb4>
 3e0:	85 e3       	ldi	r24, 0x35	; 53
 3e2:	81 c0       	rjmp	.+258    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 3e4:	86 e2       	ldi	r24, 0x26	; 38
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	fc 01       	movw	r30, r24
 3ea:	80 81       	ld	r24, Z
 3ec:	80 95       	com	r24
 3ee:	62 e0       	ldi	r22, 0x02	; 2
 3f0:	86 df       	rcall	.-244    	; 0x2fe <GetBit>
 3f2:	88 23       	and	r24, r24
 3f4:	11 f0       	breq	.+4      	; 0x3fa <GetKeypadKey+0xca>
 3f6:	88 e3       	ldi	r24, 0x38	; 56
 3f8:	76 c0       	rjmp	.+236    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 3fa:	86 e2       	ldi	r24, 0x26	; 38
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	fc 01       	movw	r30, r24
 400:	80 81       	ld	r24, Z
 402:	80 95       	com	r24
 404:	63 e0       	ldi	r22, 0x03	; 3
 406:	7b df       	rcall	.-266    	; 0x2fe <GetBit>
 408:	88 23       	and	r24, r24
 40a:	11 f0       	breq	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40c:	80 e3       	ldi	r24, 0x30	; 48
 40e:	6b c0       	rjmp	.+214    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 410:	08 e2       	ldi	r16, 0x28	; 40
 412:	10 e0       	ldi	r17, 0x00	; 0
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	66 e0       	ldi	r22, 0x06	; 6
 418:	8f ef       	ldi	r24, 0xFF	; 255
 41a:	43 df       	rcall	.-378    	; 0x2a2 <SetBit>
 41c:	f8 01       	movw	r30, r16
 41e:	80 83       	st	Z, r24
 420:	00 00       	nop
 422:	86 e2       	ldi	r24, 0x26	; 38
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	fc 01       	movw	r30, r24
 428:	80 81       	ld	r24, Z
 42a:	80 95       	com	r24
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	67 df       	rcall	.-306    	; 0x2fe <GetBit>
 430:	88 23       	and	r24, r24
 432:	11 f0       	breq	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 434:	83 e3       	ldi	r24, 0x33	; 51
 436:	57 c0       	rjmp	.+174    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 438:	86 e2       	ldi	r24, 0x26	; 38
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	fc 01       	movw	r30, r24
 43e:	80 81       	ld	r24, Z
 440:	80 95       	com	r24
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	5c df       	rcall	.-328    	; 0x2fe <GetBit>
 446:	88 23       	and	r24, r24
 448:	11 f0       	breq	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44a:	86 e3       	ldi	r24, 0x36	; 54
 44c:	4c c0       	rjmp	.+152    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 44e:	86 e2       	ldi	r24, 0x26	; 38
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	fc 01       	movw	r30, r24
 454:	80 81       	ld	r24, Z
 456:	80 95       	com	r24
 458:	62 e0       	ldi	r22, 0x02	; 2
 45a:	51 df       	rcall	.-350    	; 0x2fe <GetBit>
 45c:	88 23       	and	r24, r24
 45e:	11 f0       	breq	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 460:	89 e3       	ldi	r24, 0x39	; 57
 462:	41 c0       	rjmp	.+130    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 464:	86 e2       	ldi	r24, 0x26	; 38
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	fc 01       	movw	r30, r24
 46a:	80 81       	ld	r24, Z
 46c:	80 95       	com	r24
 46e:	63 e0       	ldi	r22, 0x03	; 3
 470:	46 df       	rcall	.-372    	; 0x2fe <GetBit>
 472:	88 23       	and	r24, r24
 474:	11 f0       	breq	.+4      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 476:	83 e2       	ldi	r24, 0x23	; 35
 478:	36 c0       	rjmp	.+108    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 47a:	08 e2       	ldi	r16, 0x28	; 40
 47c:	10 e0       	ldi	r17, 0x00	; 0
 47e:	40 e0       	ldi	r20, 0x00	; 0
 480:	67 e0       	ldi	r22, 0x07	; 7
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	0e df       	rcall	.-484    	; 0x2a2 <SetBit>
 486:	f8 01       	movw	r30, r16
 488:	80 83       	st	Z, r24
 48a:	00 00       	nop
 48c:	86 e2       	ldi	r24, 0x26	; 38
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	fc 01       	movw	r30, r24
 492:	80 81       	ld	r24, Z
 494:	80 95       	com	r24
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	32 df       	rcall	.-412    	; 0x2fe <GetBit>
 49a:	88 23       	and	r24, r24
 49c:	11 f0       	breq	.+4      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 49e:	81 e4       	ldi	r24, 0x41	; 65
 4a0:	22 c0       	rjmp	.+68     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4a2:	86 e2       	ldi	r24, 0x26	; 38
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	fc 01       	movw	r30, r24
 4a8:	80 81       	ld	r24, Z
 4aa:	80 95       	com	r24
 4ac:	61 e0       	ldi	r22, 0x01	; 1
 4ae:	27 df       	rcall	.-434    	; 0x2fe <GetBit>
 4b0:	88 23       	and	r24, r24
 4b2:	11 f0       	breq	.+4      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b4:	82 e4       	ldi	r24, 0x42	; 66
 4b6:	17 c0       	rjmp	.+46     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4b8:	86 e2       	ldi	r24, 0x26	; 38
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	fc 01       	movw	r30, r24
 4be:	80 81       	ld	r24, Z
 4c0:	80 95       	com	r24
 4c2:	62 e0       	ldi	r22, 0x02	; 2
 4c4:	1c df       	rcall	.-456    	; 0x2fe <GetBit>
 4c6:	88 23       	and	r24, r24
 4c8:	11 f0       	breq	.+4      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4ca:	83 e4       	ldi	r24, 0x43	; 67
 4cc:	0c c0       	rjmp	.+24     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4ce:	86 e2       	ldi	r24, 0x26	; 38
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	fc 01       	movw	r30, r24
 4d4:	80 81       	ld	r24, Z
 4d6:	80 95       	com	r24
 4d8:	63 e0       	ldi	r22, 0x03	; 3
 4da:	11 df       	rcall	.-478    	; 0x2fe <GetBit>
 4dc:	88 23       	and	r24, r24
 4de:	11 f0       	breq	.+4      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4e0:	84 e4       	ldi	r24, 0x44	; 68
 4e2:	01 c0       	rjmp	.+2      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	1f 91       	pop	r17
 4ec:	0f 91       	pop	r16
 4ee:	08 95       	ret

000004f0 <TimerOn>:
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	cd b7       	in	r28, 0x3d	; 61
 4f6:	de b7       	in	r29, 0x3e	; 62
 4f8:	81 e8       	ldi	r24, 0x81	; 129
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	2b e0       	ldi	r18, 0x0B	; 11
 4fe:	fc 01       	movw	r30, r24
 500:	20 83       	st	Z, r18
 502:	88 e8       	ldi	r24, 0x88	; 136
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	2d e7       	ldi	r18, 0x7D	; 125
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	fc 01       	movw	r30, r24
 50c:	31 83       	std	Z+1, r19	; 0x01
 50e:	20 83       	st	Z, r18
 510:	8f e6       	ldi	r24, 0x6F	; 111
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	22 e0       	ldi	r18, 0x02	; 2
 516:	fc 01       	movw	r30, r24
 518:	20 83       	st	Z, r18
 51a:	84 e8       	ldi	r24, 0x84	; 132
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	fc 01       	movw	r30, r24
 520:	11 82       	std	Z+1, r1	; 0x01
 522:	10 82       	st	Z, r1
 524:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 528:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 52c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 530:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 534:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 538:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 53c:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <__data_end+0x2>
 540:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <__data_end+0x3>
 544:	8f e5       	ldi	r24, 0x5F	; 95
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	2f e5       	ldi	r18, 0x5F	; 95
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	f9 01       	movw	r30, r18
 54e:	20 81       	ld	r18, Z
 550:	20 68       	ori	r18, 0x80	; 128
 552:	fc 01       	movw	r30, r24
 554:	20 83       	st	Z, r18
 556:	00 00       	nop
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	08 95       	ret

0000055e <TimerSet>:



void TimerSet(unsigned long M)
{
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	00 d0       	rcall	.+0      	; 0x564 <TimerSet+0x6>
 564:	00 d0       	rcall	.+0      	; 0x566 <TimerSet+0x8>
 566:	cd b7       	in	r28, 0x3d	; 61
 568:	de b7       	in	r29, 0x3e	; 62
 56a:	69 83       	std	Y+1, r22	; 0x01
 56c:	7a 83       	std	Y+2, r23	; 0x02
 56e:	8b 83       	std	Y+3, r24	; 0x03
 570:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
 572:	89 81       	ldd	r24, Y+1	; 0x01
 574:	9a 81       	ldd	r25, Y+2	; 0x02
 576:	ab 81       	ldd	r26, Y+3	; 0x03
 578:	bc 81       	ldd	r27, Y+4	; 0x04
 57a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 57e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 582:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 586:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 58a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 58e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 592:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 596:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 59a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 59e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 5a2:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <__data_end+0x2>
 5a6:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <__data_end+0x3>
}
 5aa:	00 00       	nop
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	0f 90       	pop	r0
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	08 95       	ret

000005ba <TimerISR>:

void TimerISR()
{
 5ba:	0f 93       	push	r16
 5bc:	1f 93       	push	r17
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	1f 92       	push	r1
 5c4:	cd b7       	in	r28, 0x3d	; 61
 5c6:	de b7       	in	r29, 0x3e	; 62
	unsigned char i;
	for(i = 0; i < tasksNum; ++i)
 5c8:	19 82       	std	Y+1, r1	; 0x01
 5ca:	a4 c0       	rjmp	.+328    	; 0x714 <TimerISR+0x15a>
	{
		if(tasks[i].elapsedTime >= tasks[i].period)
 5cc:	89 81       	ldd	r24, Y+1	; 0x01
 5ce:	28 2f       	mov	r18, r24
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	c9 01       	movw	r24, r18
 5d4:	88 0f       	add	r24, r24
 5d6:	99 1f       	adc	r25, r25
 5d8:	82 0f       	add	r24, r18
 5da:	93 1f       	adc	r25, r19
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	85 5e       	subi	r24, 0xE5	; 229
 5e6:	9e 4f       	sbci	r25, 0xFE	; 254
 5e8:	fc 01       	movw	r30, r24
 5ea:	20 81       	ld	r18, Z
 5ec:	31 81       	ldd	r19, Z+1	; 0x01
 5ee:	42 81       	ldd	r20, Z+2	; 0x02
 5f0:	53 81       	ldd	r21, Z+3	; 0x03
 5f2:	89 81       	ldd	r24, Y+1	; 0x01
 5f4:	68 2f       	mov	r22, r24
 5f6:	70 e0       	ldi	r23, 0x00	; 0
 5f8:	cb 01       	movw	r24, r22
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	86 0f       	add	r24, r22
 600:	97 1f       	adc	r25, r23
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	89 5e       	subi	r24, 0xE9	; 233
 60c:	9e 4f       	sbci	r25, 0xFE	; 254
 60e:	fc 01       	movw	r30, r24
 610:	80 81       	ld	r24, Z
 612:	91 81       	ldd	r25, Z+1	; 0x01
 614:	a2 81       	ldd	r26, Z+2	; 0x02
 616:	b3 81       	ldd	r27, Z+3	; 0x03
 618:	28 17       	cp	r18, r24
 61a:	39 07       	cpc	r19, r25
 61c:	4a 07       	cpc	r20, r26
 61e:	5b 07       	cpc	r21, r27
 620:	08 f4       	brcc	.+2      	; 0x624 <TimerISR+0x6a>
 622:	49 c0       	rjmp	.+146    	; 0x6b6 <TimerISR+0xfc>
		{
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 624:	89 81       	ldd	r24, Y+1	; 0x01
 626:	08 2f       	mov	r16, r24
 628:	10 e0       	ldi	r17, 0x00	; 0
 62a:	89 81       	ldd	r24, Y+1	; 0x01
 62c:	28 2f       	mov	r18, r24
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	c9 01       	movw	r24, r18
 632:	88 0f       	add	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	82 0f       	add	r24, r18
 638:	93 1f       	adc	r25, r19
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	88 0f       	add	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	81 5e       	subi	r24, 0xE1	; 225
 644:	9e 4f       	sbci	r25, 0xFE	; 254
 646:	fc 01       	movw	r30, r24
 648:	40 81       	ld	r20, Z
 64a:	51 81       	ldd	r21, Z+1	; 0x01
 64c:	89 81       	ldd	r24, Y+1	; 0x01
 64e:	28 2f       	mov	r18, r24
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	c9 01       	movw	r24, r18
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	82 0f       	add	r24, r18
 65a:	93 1f       	adc	r25, r19
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	88 0f       	add	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	8b 5e       	subi	r24, 0xEB	; 235
 666:	9e 4f       	sbci	r25, 0xFE	; 254
 668:	fc 01       	movw	r30, r24
 66a:	80 81       	ld	r24, Z
 66c:	91 81       	ldd	r25, Z+1	; 0x01
 66e:	fa 01       	movw	r30, r20
 670:	09 95       	icall
 672:	9c 01       	movw	r18, r24
 674:	c8 01       	movw	r24, r16
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	80 0f       	add	r24, r16
 67c:	91 1f       	adc	r25, r17
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	88 0f       	add	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	8b 5e       	subi	r24, 0xEB	; 235
 688:	9e 4f       	sbci	r25, 0xFE	; 254
 68a:	fc 01       	movw	r30, r24
 68c:	31 83       	std	Z+1, r19	; 0x01
 68e:	20 83       	st	Z, r18
			tasks[i].elapsedTime = 0;
 690:	89 81       	ldd	r24, Y+1	; 0x01
 692:	28 2f       	mov	r18, r24
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	c9 01       	movw	r24, r18
 698:	88 0f       	add	r24, r24
 69a:	99 1f       	adc	r25, r25
 69c:	82 0f       	add	r24, r18
 69e:	93 1f       	adc	r25, r19
 6a0:	88 0f       	add	r24, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	85 5e       	subi	r24, 0xE5	; 229
 6aa:	9e 4f       	sbci	r25, 0xFE	; 254
 6ac:	fc 01       	movw	r30, r24
 6ae:	10 82       	st	Z, r1
 6b0:	11 82       	std	Z+1, r1	; 0x01
 6b2:	12 82       	std	Z+2, r1	; 0x02
 6b4:	13 82       	std	Z+3, r1	; 0x03
		}
		tasks[i].elapsedTime += 1;
 6b6:	89 81       	ldd	r24, Y+1	; 0x01
 6b8:	68 2f       	mov	r22, r24
 6ba:	70 e0       	ldi	r23, 0x00	; 0
 6bc:	89 81       	ldd	r24, Y+1	; 0x01
 6be:	28 2f       	mov	r18, r24
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	c9 01       	movw	r24, r18
 6c4:	88 0f       	add	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	82 0f       	add	r24, r18
 6ca:	93 1f       	adc	r25, r19
 6cc:	88 0f       	add	r24, r24
 6ce:	99 1f       	adc	r25, r25
 6d0:	88 0f       	add	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	85 5e       	subi	r24, 0xE5	; 229
 6d6:	9e 4f       	sbci	r25, 0xFE	; 254
 6d8:	fc 01       	movw	r30, r24
 6da:	80 81       	ld	r24, Z
 6dc:	91 81       	ldd	r25, Z+1	; 0x01
 6de:	a2 81       	ldd	r26, Z+2	; 0x02
 6e0:	b3 81       	ldd	r27, Z+3	; 0x03
 6e2:	9c 01       	movw	r18, r24
 6e4:	ad 01       	movw	r20, r26
 6e6:	2f 5f       	subi	r18, 0xFF	; 255
 6e8:	3f 4f       	sbci	r19, 0xFF	; 255
 6ea:	4f 4f       	sbci	r20, 0xFF	; 255
 6ec:	5f 4f       	sbci	r21, 0xFF	; 255
 6ee:	cb 01       	movw	r24, r22
 6f0:	88 0f       	add	r24, r24
 6f2:	99 1f       	adc	r25, r25
 6f4:	86 0f       	add	r24, r22
 6f6:	97 1f       	adc	r25, r23
 6f8:	88 0f       	add	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	88 0f       	add	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	85 5e       	subi	r24, 0xE5	; 229
 702:	9e 4f       	sbci	r25, 0xFE	; 254
 704:	fc 01       	movw	r30, r24
 706:	20 83       	st	Z, r18
 708:	31 83       	std	Z+1, r19	; 0x01
 70a:	42 83       	std	Z+2, r20	; 0x02
 70c:	53 83       	std	Z+3, r21	; 0x03
}

void TimerISR()
{
	unsigned char i;
	for(i = 0; i < tasksNum; ++i)
 70e:	89 81       	ldd	r24, Y+1	; 0x01
 710:	8f 5f       	subi	r24, 0xFF	; 255
 712:	89 83       	std	Y+1, r24	; 0x01
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	99 81       	ldd	r25, Y+1	; 0x01
 718:	98 17       	cp	r25, r24
 71a:	08 f4       	brcc	.+2      	; 0x71e <TimerISR+0x164>
 71c:	57 cf       	rjmp	.-338    	; 0x5cc <TimerISR+0x12>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += 1;
	}
}
 71e:	00 00       	nop
 720:	0f 90       	pop	r0
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	1f 91       	pop	r17
 728:	0f 91       	pop	r16
 72a:	08 95       	ret

0000072c <__vector_13>:

ISR(TIMER1_COMPA_vect) {
 72c:	1f 92       	push	r1
 72e:	0f 92       	push	r0
 730:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 734:	0f 92       	push	r0
 736:	11 24       	eor	r1, r1
 738:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 73c:	0f 92       	push	r0
 73e:	2f 93       	push	r18
 740:	3f 93       	push	r19
 742:	4f 93       	push	r20
 744:	5f 93       	push	r21
 746:	6f 93       	push	r22
 748:	7f 93       	push	r23
 74a:	8f 93       	push	r24
 74c:	9f 93       	push	r25
 74e:	af 93       	push	r26
 750:	bf 93       	push	r27
 752:	ef 93       	push	r30
 754:	ff 93       	push	r31
 756:	cf 93       	push	r28
 758:	df 93       	push	r29
 75a:	cd b7       	in	r28, 0x3d	; 61
 75c:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 75e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 762:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 766:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <__data_end+0x2>
 76a:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <__data_end+0x3>
 76e:	01 97       	sbiw	r24, 0x01	; 1
 770:	a1 09       	sbc	r26, r1
 772:	b1 09       	sbc	r27, r1
 774:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 778:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 77c:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <__data_end+0x2>
 780:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 784:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 788:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 78c:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <__data_end+0x2>
 790:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <__data_end+0x3>
 794:	89 2b       	or	r24, r25
 796:	8a 2b       	or	r24, r26
 798:	8b 2b       	or	r24, r27
 79a:	89 f4       	brne	.+34     	; 0x7be <__vector_13+0x92>
		TimerISR(); // Call the ISR that the user uses
 79c:	0e df       	rcall	.-484    	; 0x5ba <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 79e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 7a6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 7aa:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 7ae:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 7b2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 7b6:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <__data_end+0x2>
 7ba:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <__data_end+0x3>
	}
}
 7be:	00 00       	nop
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	ff 91       	pop	r31
 7c6:	ef 91       	pop	r30
 7c8:	bf 91       	pop	r27
 7ca:	af 91       	pop	r26
 7cc:	9f 91       	pop	r25
 7ce:	8f 91       	pop	r24
 7d0:	7f 91       	pop	r23
 7d2:	6f 91       	pop	r22
 7d4:	5f 91       	pop	r21
 7d6:	4f 91       	pop	r20
 7d8:	3f 91       	pop	r19
 7da:	2f 91       	pop	r18
 7dc:	0f 90       	pop	r0
 7de:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 7e2:	0f 90       	pop	r0
 7e4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 7e8:	0f 90       	pop	r0
 7ea:	1f 90       	pop	r1
 7ec:	18 95       	reti

000007ee <TickFct_eeprom>:


enum eeprom{eeprom_start, eeprom_loop};
int TickFct_eeprom(int state)
{
 7ee:	cf 93       	push	r28
 7f0:	df 93       	push	r29
 7f2:	00 d0       	rcall	.+0      	; 0x7f4 <TickFct_eeprom+0x6>
 7f4:	00 d0       	rcall	.+0      	; 0x7f6 <TickFct_eeprom+0x8>
 7f6:	cd b7       	in	r28, 0x3d	; 61
 7f8:	de b7       	in	r29, 0x3e	; 62
 7fa:	9c 83       	std	Y+4, r25	; 0x04
 7fc:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t currentHighScore;
	static char current = 0;
	switch(state)
 7fe:	8b 81       	ldd	r24, Y+3	; 0x03
 800:	9c 81       	ldd	r25, Y+4	; 0x04
 802:	00 97       	sbiw	r24, 0x00	; 0
 804:	19 f0       	breq	.+6      	; 0x80c <TickFct_eeprom+0x1e>
 806:	01 97       	sbiw	r24, 0x01	; 1
 808:	c1 f0       	breq	.+48     	; 0x83a <TickFct_eeprom+0x4c>
			LCD_WriteData(currentHighScore);

			break;
		
		default:
			break;
 80a:	34 c0       	rjmp	.+104    	; 0x874 <TickFct_eeprom+0x86>
	static char current = 0;
	switch(state)
	{
		case eeprom_start:
			//highScore = 0xFFFF;
			currentHighScore = eeprom_read_byte(&highScore);
 80c:	80 e0       	ldi	r24, 0x00	; 0
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	a2 d0       	rcall	.+324    	; 0x956 <eeprom_read_byte>
 812:	88 2f       	mov	r24, r24
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	9a 83       	std	Y+2, r25	; 0x02
 818:	89 83       	std	Y+1, r24	; 0x01
			if (currentHighScore==0xFFFF)
 81a:	89 81       	ldd	r24, Y+1	; 0x01
 81c:	9a 81       	ldd	r25, Y+2	; 0x02
 81e:	01 96       	adiw	r24, 0x01	; 1
 820:	11 f4       	brne	.+4      	; 0x826 <TickFct_eeprom+0x38>
				currentHighScore= 0;
 822:	1a 82       	std	Y+2, r1	; 0x02
 824:	19 82       	std	Y+1, r1	; 0x01
				eeprom_write_byte(&highScore, currentHighScore);
 826:	89 81       	ldd	r24, Y+1	; 0x01
 828:	68 2f       	mov	r22, r24
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	9b d0       	rcall	.+310    	; 0x966 <eeprom_write_byte>
			state = eeprom_loop;
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	9c 83       	std	Y+4, r25	; 0x04
			break;
 836:	8b 83       	std	Y+3, r24	; 0x03
		
		case eeprom_loop:
		
			score = GetKeypadKey();
 838:	1d c0       	rjmp	.+58     	; 0x874 <TickFct_eeprom+0x86>
 83a:	7a dd       	rcall	.-1292   	; 0x330 <GetKeypadKey>
 83c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <score>
			if(score == '1')
 840:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <score>
 844:	81 33       	cpi	r24, 0x31	; 49
 846:	51 f4       	brne	.+20     	; 0x85c <TickFct_eeprom+0x6e>
			{
				highScore++;
 848:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
 84c:	8f 5f       	subi	r24, 0xFF	; 255
 84e:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
				eeprom_write_byte(&highScore, currentHighScore);
 852:	89 81       	ldd	r24, Y+1	; 0x01
 854:	68 2f       	mov	r22, r24
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	90 e0       	ldi	r25, 0x00	; 0
			}
			currentHighScore = eeprom_read_byte(&highScore);
 85a:	85 d0       	rcall	.+266    	; 0x966 <eeprom_write_byte>
 85c:	80 e0       	ldi	r24, 0x00	; 0
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	7a d0       	rcall	.+244    	; 0x956 <eeprom_read_byte>
 862:	88 2f       	mov	r24, r24
 864:	90 e0       	ldi	r25, 0x00	; 0
			LCD_Cursor(13);
 866:	9a 83       	std	Y+2, r25	; 0x02
 868:	89 83       	std	Y+1, r24	; 0x01
 86a:	8d e0       	ldi	r24, 0x0D	; 13
			LCD_WriteData(currentHighScore);
 86c:	d5 dc       	rcall	.-1622   	; 0x218 <LCD_Cursor>
 86e:	89 81       	ldd	r24, Y+1	; 0x01
 870:	7a dc       	rcall	.-1804   	; 0x166 <LCD_WriteData>

			break;
 872:	00 00       	nop
		
		default:
			break;
	}
	return state;
 874:	8b 81       	ldd	r24, Y+3	; 0x03
 876:	9c 81       	ldd	r25, Y+4	; 0x04
}
 878:	0f 90       	pop	r0
 87a:	0f 90       	pop	r0
 87c:	0f 90       	pop	r0
 87e:	0f 90       	pop	r0
 880:	df 91       	pop	r29
 882:	cf 91       	pop	r28
 884:	08 95       	ret

00000886 <main>:

int main(void)
{
 886:	cf 93       	push	r28
 888:	df 93       	push	r29
 88a:	1f 92       	push	r1
 88c:	cd b7       	in	r28, 0x3d	; 61
 88e:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	DDRD = 0xFF; PORTD = 0x00;
 890:	8a e2       	ldi	r24, 0x2A	; 42
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	2f ef       	ldi	r18, 0xFF	; 255
 896:	fc 01       	movw	r30, r24
 898:	20 83       	st	Z, r18
 89a:	8b e2       	ldi	r24, 0x2B	; 43
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	fc 01       	movw	r30, r24
 8a0:	10 82       	st	Z, r1
	DDRA = 0xFF; PORTA = 0x00;
 8a2:	81 e2       	ldi	r24, 0x21	; 33
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	2f ef       	ldi	r18, 0xFF	; 255
 8a8:	fc 01       	movw	r30, r24
 8aa:	20 83       	st	Z, r18
 8ac:	82 e2       	ldi	r24, 0x22	; 34
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	fc 01       	movw	r30, r24
 8b2:	10 82       	st	Z, r1
	LCD_init();
 8b4:	13 dc       	rcall	.-2010   	; 0xdc <LCD_init>
	LCD_Cursor(1);
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	af dc       	rcall	.-1698   	; 0x218 <LCD_Cursor>
	LCD_DisplayString(1, "Highscore: ");
 8ba:	64 e0       	ldi	r22, 0x04	; 4
 8bc:	71 e0       	ldi	r23, 0x01	; 1
 8be:	81 e0       	ldi	r24, 0x01	; 1
	LCD_Cursor(12);
 8c0:	81 dc       	rcall	.-1790   	; 0x1c4 <LCD_DisplayString>
 8c2:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_WriteData(highScore + '0');
 8c4:	a9 dc       	rcall	.-1710   	; 0x218 <LCD_Cursor>
 8c6:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
 8ca:	80 5d       	subi	r24, 0xD0	; 208
	TimerSet(1);
 8cc:	4c dc       	rcall	.-1896   	; 0x166 <LCD_WriteData>
 8ce:	61 e0       	ldi	r22, 0x01	; 1
 8d0:	70 e0       	ldi	r23, 0x00	; 0
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 8d6:	43 de       	rcall	.-890    	; 0x55e <TimerSet>
 8d8:	0b de       	rcall	.-1002   	; 0x4f0 <TimerOn>
	unsigned char i = 0;
 8da:	19 82       	std	Y+1, r1	; 0x01
	tasks[i].state = eeprom_start;
 8dc:	89 81       	ldd	r24, Y+1	; 0x01
 8de:	28 2f       	mov	r18, r24
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	c9 01       	movw	r24, r18
 8e4:	88 0f       	add	r24, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	82 0f       	add	r24, r18
 8ea:	93 1f       	adc	r25, r19
 8ec:	88 0f       	add	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	88 0f       	add	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	8b 5e       	subi	r24, 0xEB	; 235
 8f6:	9e 4f       	sbci	r25, 0xFE	; 254
 8f8:	fc 01       	movw	r30, r24
 8fa:	11 82       	std	Z+1, r1	; 0x01
 8fc:	10 82       	st	Z, r1
	tasks[i].period = 500;
 8fe:	89 81       	ldd	r24, Y+1	; 0x01
 900:	28 2f       	mov	r18, r24
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	c9 01       	movw	r24, r18
 906:	88 0f       	add	r24, r24
 908:	99 1f       	adc	r25, r25
 90a:	82 0f       	add	r24, r18
 90c:	93 1f       	adc	r25, r19
 90e:	88 0f       	add	r24, r24
 910:	99 1f       	adc	r25, r25
 912:	88 0f       	add	r24, r24
 914:	99 1f       	adc	r25, r25
 916:	9c 01       	movw	r18, r24
 918:	29 5e       	subi	r18, 0xE9	; 233
 91a:	3e 4f       	sbci	r19, 0xFE	; 254
 91c:	84 ef       	ldi	r24, 0xF4	; 244
 91e:	91 e0       	ldi	r25, 0x01	; 1
 920:	a0 e0       	ldi	r26, 0x00	; 0
 922:	b0 e0       	ldi	r27, 0x00	; 0
 924:	f9 01       	movw	r30, r18
 926:	80 83       	st	Z, r24
 928:	91 83       	std	Z+1, r25	; 0x01
 92a:	a2 83       	std	Z+2, r26	; 0x02
 92c:	b3 83       	std	Z+3, r27	; 0x03
	tasks[i].TickFct = &TickFct_eeprom;
 92e:	89 81       	ldd	r24, Y+1	; 0x01
 930:	28 2f       	mov	r18, r24
 932:	30 e0       	ldi	r19, 0x00	; 0
 934:	c9 01       	movw	r24, r18
 936:	88 0f       	add	r24, r24
 938:	99 1f       	adc	r25, r25
 93a:	82 0f       	add	r24, r18
 93c:	93 1f       	adc	r25, r19
 93e:	88 0f       	add	r24, r24
 940:	99 1f       	adc	r25, r25
 942:	88 0f       	add	r24, r24
 944:	99 1f       	adc	r25, r25
 946:	81 5e       	subi	r24, 0xE1	; 225
 948:	9e 4f       	sbci	r25, 0xFE	; 254
 94a:	27 ef       	ldi	r18, 0xF7	; 247
 94c:	33 e0       	ldi	r19, 0x03	; 3
 94e:	fc 01       	movw	r30, r24
 950:	31 83       	std	Z+1, r19	; 0x01
 952:	20 83       	st	Z, r18
    while (1) 
    {

    }
 954:	ff cf       	rjmp	.-2      	; 0x954 <main+0xce>

00000956 <eeprom_read_byte>:
 956:	f9 99       	sbic	0x1f, 1	; 31
 958:	fe cf       	rjmp	.-4      	; 0x956 <eeprom_read_byte>
 95a:	92 bd       	out	0x22, r25	; 34
 95c:	81 bd       	out	0x21, r24	; 33
 95e:	f8 9a       	sbi	0x1f, 0	; 31
 960:	99 27       	eor	r25, r25
 962:	80 b5       	in	r24, 0x20	; 32
 964:	08 95       	ret

00000966 <eeprom_write_byte>:
 966:	26 2f       	mov	r18, r22

00000968 <eeprom_write_r18>:
 968:	f9 99       	sbic	0x1f, 1	; 31
 96a:	fe cf       	rjmp	.-4      	; 0x968 <eeprom_write_r18>
 96c:	1f ba       	out	0x1f, r1	; 31
 96e:	92 bd       	out	0x22, r25	; 34
 970:	81 bd       	out	0x21, r24	; 33
 972:	20 bd       	out	0x20, r18	; 32
 974:	0f b6       	in	r0, 0x3f	; 63
 976:	f8 94       	cli
 978:	fa 9a       	sbi	0x1f, 2	; 31
 97a:	f9 9a       	sbi	0x1f, 1	; 31
 97c:	0f be       	out	0x3f, r0	; 63
 97e:	01 96       	adiw	r24, 0x01	; 1
 980:	08 95       	ret

00000982 <_exit>:
 982:	f8 94       	cli

00000984 <__stop_program>:
 984:	ff cf       	rjmp	.-2      	; 0x984 <__stop_program>
