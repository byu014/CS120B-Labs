
byu014_lnguy089_lab11_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000aea  00000b7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800116  00800116  00000b94  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cad  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008dd  00000000  00000000  00001961  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082d  00000000  00000000  0000223e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00002a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ec  00000000  00000000  00002d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005f4  00000000  00000000  00003324  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003918  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7b c3       	rjmp	.+1782   	; 0x72c <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ee       	ldi	r30, 0xEA	; 234
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 34       	cpi	r26, 0x42	; 66
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	20 d4       	rcall	.+2112   	; 0x904 <main>
  c4:	10 c5       	rjmp	.+2592   	; 0xae6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SetBit>:
}

void TimerOff()
{
	TimerFlag = 1;
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <SetBit+0x6>
  ce:	1f 92       	push	r1
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	89 83       	std	Y+1, r24	; 0x01
  d6:	6a 83       	std	Y+2, r22	; 0x02
  d8:	4b 83       	std	Y+3, r20	; 0x03
  da:	8b 81       	ldd	r24, Y+3	; 0x03
  dc:	88 23       	and	r24, r24
  de:	71 f0       	breq	.+28     	; 0xfc <SetBit+0x34>
  e0:	8a 81       	ldd	r24, Y+2	; 0x02
  e2:	28 2f       	mov	r18, r24
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <SetBit+0x28>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	2a 95       	dec	r18
  f2:	e2 f7       	brpl	.-8      	; 0xec <SetBit+0x24>
  f4:	98 2f       	mov	r25, r24
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	89 2b       	or	r24, r25
  fa:	0e c0       	rjmp	.+28     	; 0x118 <SetBit+0x50>
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	28 2f       	mov	r18, r24
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <SetBit+0x44>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	2a 95       	dec	r18
 10e:	e2 f7       	brpl	.-8      	; 0x108 <SetBit+0x40>
 110:	98 2f       	mov	r25, r24
 112:	90 95       	com	r25
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	89 23       	and	r24, r25
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <GetBit>:
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	00 d0       	rcall	.+0      	; 0x12a <GetBit+0x6>
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
 12e:	89 83       	std	Y+1, r24	; 0x01
 130:	6a 83       	std	Y+2, r22	; 0x02
 132:	8a 81       	ldd	r24, Y+2	; 0x02
 134:	28 2f       	mov	r18, r24
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <GetBit+0x1e>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	2a 95       	dec	r18
 144:	e2 f7       	brpl	.-8      	; 0x13e <GetBit+0x1a>
 146:	98 2f       	mov	r25, r24
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	89 23       	and	r24, r25
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <GetKeypadKey>:
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	08 e2       	ldi	r16, 0x28	; 40
 164:	10 e0       	ldi	r17, 0x00	; 0
 166:	40 e0       	ldi	r20, 0x00	; 0
 168:	64 e0       	ldi	r22, 0x04	; 4
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	ad df       	rcall	.-166    	; 0xc8 <SetBit>
 16e:	f8 01       	movw	r30, r16
 170:	80 83       	st	Z, r24
 172:	00 00       	nop
 174:	86 e2       	ldi	r24, 0x26	; 38
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	fc 01       	movw	r30, r24
 17a:	80 81       	ld	r24, Z
 17c:	80 95       	com	r24
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	d1 df       	rcall	.-94     	; 0x124 <GetBit>
 182:	88 23       	and	r24, r24
 184:	11 f0       	breq	.+4      	; 0x18a <GetKeypadKey+0x34>
 186:	81 e3       	ldi	r24, 0x31	; 49
 188:	c1 c0       	rjmp	.+386    	; 0x30c <GetKeypadKey+0x1b6>
 18a:	86 e2       	ldi	r24, 0x26	; 38
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	fc 01       	movw	r30, r24
 190:	80 81       	ld	r24, Z
 192:	80 95       	com	r24
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	c6 df       	rcall	.-116    	; 0x124 <GetBit>
 198:	88 23       	and	r24, r24
 19a:	11 f0       	breq	.+4      	; 0x1a0 <GetKeypadKey+0x4a>
 19c:	84 e3       	ldi	r24, 0x34	; 52
 19e:	b6 c0       	rjmp	.+364    	; 0x30c <GetKeypadKey+0x1b6>
 1a0:	86 e2       	ldi	r24, 0x26	; 38
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	fc 01       	movw	r30, r24
 1a6:	80 81       	ld	r24, Z
 1a8:	80 95       	com	r24
 1aa:	62 e0       	ldi	r22, 0x02	; 2
 1ac:	bb df       	rcall	.-138    	; 0x124 <GetBit>
 1ae:	88 23       	and	r24, r24
 1b0:	11 f0       	breq	.+4      	; 0x1b6 <GetKeypadKey+0x60>
 1b2:	87 e3       	ldi	r24, 0x37	; 55
 1b4:	ab c0       	rjmp	.+342    	; 0x30c <GetKeypadKey+0x1b6>
 1b6:	86 e2       	ldi	r24, 0x26	; 38
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	fc 01       	movw	r30, r24
 1bc:	80 81       	ld	r24, Z
 1be:	80 95       	com	r24
 1c0:	63 e0       	ldi	r22, 0x03	; 3
 1c2:	b0 df       	rcall	.-160    	; 0x124 <GetBit>
 1c4:	88 23       	and	r24, r24
 1c6:	11 f0       	breq	.+4      	; 0x1cc <GetKeypadKey+0x76>
 1c8:	8a e2       	ldi	r24, 0x2A	; 42
 1ca:	a0 c0       	rjmp	.+320    	; 0x30c <GetKeypadKey+0x1b6>
 1cc:	08 e2       	ldi	r16, 0x28	; 40
 1ce:	10 e0       	ldi	r17, 0x00	; 0
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	65 e0       	ldi	r22, 0x05	; 5
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	78 df       	rcall	.-272    	; 0xc8 <SetBit>
 1d8:	f8 01       	movw	r30, r16
 1da:	80 83       	st	Z, r24
 1dc:	00 00       	nop
 1de:	86 e2       	ldi	r24, 0x26	; 38
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	fc 01       	movw	r30, r24
 1e4:	80 81       	ld	r24, Z
 1e6:	80 95       	com	r24
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	9c df       	rcall	.-200    	; 0x124 <GetBit>
 1ec:	88 23       	and	r24, r24
 1ee:	11 f0       	breq	.+4      	; 0x1f4 <GetKeypadKey+0x9e>
 1f0:	82 e3       	ldi	r24, 0x32	; 50
 1f2:	8c c0       	rjmp	.+280    	; 0x30c <GetKeypadKey+0x1b6>
 1f4:	86 e2       	ldi	r24, 0x26	; 38
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	fc 01       	movw	r30, r24
 1fa:	80 81       	ld	r24, Z
 1fc:	80 95       	com	r24
 1fe:	61 e0       	ldi	r22, 0x01	; 1
 200:	91 df       	rcall	.-222    	; 0x124 <GetBit>
 202:	88 23       	and	r24, r24
 204:	11 f0       	breq	.+4      	; 0x20a <GetKeypadKey+0xb4>
 206:	85 e3       	ldi	r24, 0x35	; 53
 208:	81 c0       	rjmp	.+258    	; 0x30c <GetKeypadKey+0x1b6>
 20a:	86 e2       	ldi	r24, 0x26	; 38
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	fc 01       	movw	r30, r24
 210:	80 81       	ld	r24, Z
 212:	80 95       	com	r24
 214:	62 e0       	ldi	r22, 0x02	; 2
 216:	86 df       	rcall	.-244    	; 0x124 <GetBit>
 218:	88 23       	and	r24, r24
 21a:	11 f0       	breq	.+4      	; 0x220 <GetKeypadKey+0xca>
 21c:	88 e3       	ldi	r24, 0x38	; 56
 21e:	76 c0       	rjmp	.+236    	; 0x30c <GetKeypadKey+0x1b6>
 220:	86 e2       	ldi	r24, 0x26	; 38
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	fc 01       	movw	r30, r24
 226:	80 81       	ld	r24, Z
 228:	80 95       	com	r24
 22a:	63 e0       	ldi	r22, 0x03	; 3
 22c:	7b df       	rcall	.-266    	; 0x124 <GetBit>
 22e:	88 23       	and	r24, r24
 230:	11 f0       	breq	.+4      	; 0x236 <GetKeypadKey+0xe0>
 232:	80 e3       	ldi	r24, 0x30	; 48
 234:	6b c0       	rjmp	.+214    	; 0x30c <GetKeypadKey+0x1b6>
 236:	08 e2       	ldi	r16, 0x28	; 40
 238:	10 e0       	ldi	r17, 0x00	; 0
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	66 e0       	ldi	r22, 0x06	; 6
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	43 df       	rcall	.-378    	; 0xc8 <SetBit>
 242:	f8 01       	movw	r30, r16
 244:	80 83       	st	Z, r24
 246:	00 00       	nop
 248:	86 e2       	ldi	r24, 0x26	; 38
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	fc 01       	movw	r30, r24
 24e:	80 81       	ld	r24, Z
 250:	80 95       	com	r24
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	67 df       	rcall	.-306    	; 0x124 <GetBit>
 256:	88 23       	and	r24, r24
 258:	11 f0       	breq	.+4      	; 0x25e <GetKeypadKey+0x108>
 25a:	83 e3       	ldi	r24, 0x33	; 51
 25c:	57 c0       	rjmp	.+174    	; 0x30c <GetKeypadKey+0x1b6>
 25e:	86 e2       	ldi	r24, 0x26	; 38
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	fc 01       	movw	r30, r24
 264:	80 81       	ld	r24, Z
 266:	80 95       	com	r24
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	5c df       	rcall	.-328    	; 0x124 <GetBit>
 26c:	88 23       	and	r24, r24
 26e:	11 f0       	breq	.+4      	; 0x274 <GetKeypadKey+0x11e>
 270:	86 e3       	ldi	r24, 0x36	; 54
 272:	4c c0       	rjmp	.+152    	; 0x30c <GetKeypadKey+0x1b6>
 274:	86 e2       	ldi	r24, 0x26	; 38
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	fc 01       	movw	r30, r24
 27a:	80 81       	ld	r24, Z
 27c:	80 95       	com	r24
 27e:	62 e0       	ldi	r22, 0x02	; 2
 280:	51 df       	rcall	.-350    	; 0x124 <GetBit>
 282:	88 23       	and	r24, r24
 284:	11 f0       	breq	.+4      	; 0x28a <GetKeypadKey+0x134>
 286:	89 e3       	ldi	r24, 0x39	; 57
 288:	41 c0       	rjmp	.+130    	; 0x30c <GetKeypadKey+0x1b6>
 28a:	86 e2       	ldi	r24, 0x26	; 38
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	fc 01       	movw	r30, r24
 290:	80 81       	ld	r24, Z
 292:	80 95       	com	r24
 294:	63 e0       	ldi	r22, 0x03	; 3
 296:	46 df       	rcall	.-372    	; 0x124 <GetBit>
 298:	88 23       	and	r24, r24
 29a:	11 f0       	breq	.+4      	; 0x2a0 <GetKeypadKey+0x14a>
 29c:	83 e2       	ldi	r24, 0x23	; 35
 29e:	36 c0       	rjmp	.+108    	; 0x30c <GetKeypadKey+0x1b6>
 2a0:	08 e2       	ldi	r16, 0x28	; 40
 2a2:	10 e0       	ldi	r17, 0x00	; 0
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	67 e0       	ldi	r22, 0x07	; 7
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	0e df       	rcall	.-484    	; 0xc8 <SetBit>
 2ac:	f8 01       	movw	r30, r16
 2ae:	80 83       	st	Z, r24
 2b0:	00 00       	nop
 2b2:	86 e2       	ldi	r24, 0x26	; 38
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	fc 01       	movw	r30, r24
 2b8:	80 81       	ld	r24, Z
 2ba:	80 95       	com	r24
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	32 df       	rcall	.-412    	; 0x124 <GetBit>
 2c0:	88 23       	and	r24, r24
 2c2:	11 f0       	breq	.+4      	; 0x2c8 <GetKeypadKey+0x172>
 2c4:	81 e4       	ldi	r24, 0x41	; 65
 2c6:	22 c0       	rjmp	.+68     	; 0x30c <GetKeypadKey+0x1b6>
 2c8:	86 e2       	ldi	r24, 0x26	; 38
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	fc 01       	movw	r30, r24
 2ce:	80 81       	ld	r24, Z
 2d0:	80 95       	com	r24
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	27 df       	rcall	.-434    	; 0x124 <GetBit>
 2d6:	88 23       	and	r24, r24
 2d8:	11 f0       	breq	.+4      	; 0x2de <GetKeypadKey+0x188>
 2da:	82 e4       	ldi	r24, 0x42	; 66
 2dc:	17 c0       	rjmp	.+46     	; 0x30c <GetKeypadKey+0x1b6>
 2de:	86 e2       	ldi	r24, 0x26	; 38
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	fc 01       	movw	r30, r24
 2e4:	80 81       	ld	r24, Z
 2e6:	80 95       	com	r24
 2e8:	62 e0       	ldi	r22, 0x02	; 2
 2ea:	1c df       	rcall	.-456    	; 0x124 <GetBit>
 2ec:	88 23       	and	r24, r24
 2ee:	11 f0       	breq	.+4      	; 0x2f4 <GetKeypadKey+0x19e>
 2f0:	83 e4       	ldi	r24, 0x43	; 67
 2f2:	0c c0       	rjmp	.+24     	; 0x30c <GetKeypadKey+0x1b6>
 2f4:	86 e2       	ldi	r24, 0x26	; 38
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	fc 01       	movw	r30, r24
 2fa:	80 81       	ld	r24, Z
 2fc:	80 95       	com	r24
 2fe:	63 e0       	ldi	r22, 0x03	; 3
 300:	11 df       	rcall	.-478    	; 0x124 <GetBit>
 302:	88 23       	and	r24, r24
 304:	11 f0       	breq	.+4      	; 0x30a <GetKeypadKey+0x1b4>
 306:	84 e4       	ldi	r24, 0x44	; 68
 308:	01 c0       	rjmp	.+2      	; 0x30c <GetKeypadKey+0x1b6>
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	0f 91       	pop	r16
 314:	08 95       	ret

00000316 <LCD_ClearScreen>:
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	1a d0       	rcall	.+52     	; 0x356 <LCD_WriteCommand>
 322:	00 00       	nop
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <LCD_init>:
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
 332:	84 e6       	ldi	r24, 0x64	; 100
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	ac d0       	rcall	.+344    	; 0x490 <delay_ms>
 338:	88 e3       	ldi	r24, 0x38	; 56
 33a:	0d d0       	rcall	.+26     	; 0x356 <LCD_WriteCommand>
 33c:	86 e0       	ldi	r24, 0x06	; 6
 33e:	0b d0       	rcall	.+22     	; 0x356 <LCD_WriteCommand>
 340:	8f e0       	ldi	r24, 0x0F	; 15
 342:	09 d0       	rcall	.+18     	; 0x356 <LCD_WriteCommand>
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	07 d0       	rcall	.+14     	; 0x356 <LCD_WriteCommand>
 348:	8a e0       	ldi	r24, 0x0A	; 10
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	a1 d0       	rcall	.+322    	; 0x490 <delay_ms>
 34e:	00 00       	nop
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <LCD_WriteCommand>:
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	1f 92       	push	r1
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
 360:	89 83       	std	Y+1, r24	; 0x01
 362:	82 e2       	ldi	r24, 0x22	; 34
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	22 e2       	ldi	r18, 0x22	; 34
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	f9 01       	movw	r30, r18
 36c:	20 81       	ld	r18, Z
 36e:	2e 7f       	andi	r18, 0xFE	; 254
 370:	fc 01       	movw	r30, r24
 372:	20 83       	st	Z, r18
 374:	8b e2       	ldi	r24, 0x2B	; 43
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	29 81       	ldd	r18, Y+1	; 0x01
 37a:	fc 01       	movw	r30, r24
 37c:	20 83       	st	Z, r18
 37e:	82 e2       	ldi	r24, 0x22	; 34
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	22 e2       	ldi	r18, 0x22	; 34
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	f9 01       	movw	r30, r18
 388:	20 81       	ld	r18, Z
 38a:	22 60       	ori	r18, 0x02	; 2
 38c:	fc 01       	movw	r30, r24
 38e:	20 83       	st	Z, r18
 390:	00 00       	nop
 392:	82 e2       	ldi	r24, 0x22	; 34
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	22 e2       	ldi	r18, 0x22	; 34
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	f9 01       	movw	r30, r18
 39c:	20 81       	ld	r18, Z
 39e:	2d 7f       	andi	r18, 0xFD	; 253
 3a0:	fc 01       	movw	r30, r24
 3a2:	20 83       	st	Z, r18
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	73 d0       	rcall	.+230    	; 0x490 <delay_ms>
 3aa:	00 00       	nop
 3ac:	0f 90       	pop	r0
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	08 95       	ret

000003b4 <LCD_WriteData>:
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	1f 92       	push	r1
 3ba:	cd b7       	in	r28, 0x3d	; 61
 3bc:	de b7       	in	r29, 0x3e	; 62
 3be:	89 83       	std	Y+1, r24	; 0x01
 3c0:	82 e2       	ldi	r24, 0x22	; 34
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	22 e2       	ldi	r18, 0x22	; 34
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	f9 01       	movw	r30, r18
 3ca:	20 81       	ld	r18, Z
 3cc:	21 60       	ori	r18, 0x01	; 1
 3ce:	fc 01       	movw	r30, r24
 3d0:	20 83       	st	Z, r18
 3d2:	8b e2       	ldi	r24, 0x2B	; 43
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	29 81       	ldd	r18, Y+1	; 0x01
 3d8:	fc 01       	movw	r30, r24
 3da:	20 83       	st	Z, r18
 3dc:	82 e2       	ldi	r24, 0x22	; 34
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	22 e2       	ldi	r18, 0x22	; 34
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	f9 01       	movw	r30, r18
 3e6:	20 81       	ld	r18, Z
 3e8:	22 60       	ori	r18, 0x02	; 2
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 83       	st	Z, r18
 3ee:	00 00       	nop
 3f0:	82 e2       	ldi	r24, 0x22	; 34
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	22 e2       	ldi	r18, 0x22	; 34
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	f9 01       	movw	r30, r18
 3fa:	20 81       	ld	r18, Z
 3fc:	2d 7f       	andi	r18, 0xFD	; 253
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	44 d0       	rcall	.+136    	; 0x490 <delay_ms>
 408:	00 00       	nop
 40a:	0f 90       	pop	r0
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <LCD_DisplayString>:
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	00 d0       	rcall	.+0      	; 0x418 <LCD_DisplayString+0x6>
 418:	00 d0       	rcall	.+0      	; 0x41a <LCD_DisplayString+0x8>
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	8a 83       	std	Y+2, r24	; 0x02
 420:	7c 83       	std	Y+4, r23	; 0x04
 422:	6b 83       	std	Y+3, r22	; 0x03
 424:	78 df       	rcall	.-272    	; 0x316 <LCD_ClearScreen>
 426:	8a 81       	ldd	r24, Y+2	; 0x02
 428:	89 83       	std	Y+1, r24	; 0x01
 42a:	0f c0       	rjmp	.+30     	; 0x44a <LCD_DisplayString+0x38>
 42c:	89 81       	ldd	r24, Y+1	; 0x01
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	98 0f       	add	r25, r24
 432:	99 83       	std	Y+1, r25	; 0x01
 434:	18 d0       	rcall	.+48     	; 0x466 <LCD_Cursor>
 436:	8b 81       	ldd	r24, Y+3	; 0x03
 438:	9c 81       	ldd	r25, Y+4	; 0x04
 43a:	9c 01       	movw	r18, r24
 43c:	2f 5f       	subi	r18, 0xFF	; 255
 43e:	3f 4f       	sbci	r19, 0xFF	; 255
 440:	3c 83       	std	Y+4, r19	; 0x04
 442:	2b 83       	std	Y+3, r18	; 0x03
 444:	fc 01       	movw	r30, r24
 446:	80 81       	ld	r24, Z
 448:	b5 df       	rcall	.-150    	; 0x3b4 <LCD_WriteData>
 44a:	8b 81       	ldd	r24, Y+3	; 0x03
 44c:	9c 81       	ldd	r25, Y+4	; 0x04
 44e:	fc 01       	movw	r30, r24
 450:	80 81       	ld	r24, Z
 452:	88 23       	and	r24, r24
 454:	59 f7       	brne	.-42     	; 0x42c <LCD_DisplayString+0x1a>
 456:	00 00       	nop
 458:	0f 90       	pop	r0
 45a:	0f 90       	pop	r0
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	08 95       	ret

00000466 <LCD_Cursor>:
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	1f 92       	push	r1
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
 470:	89 83       	std	Y+1, r24	; 0x01
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	81 31       	cpi	r24, 0x11	; 17
 476:	20 f4       	brcc	.+8      	; 0x480 <LCD_Cursor+0x1a>
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	81 58       	subi	r24, 0x81	; 129
 47c:	6c df       	rcall	.-296    	; 0x356 <LCD_WriteCommand>
 47e:	03 c0       	rjmp	.+6      	; 0x486 <LCD_Cursor+0x20>
 480:	89 81       	ldd	r24, Y+1	; 0x01
 482:	81 55       	subi	r24, 0x51	; 81
 484:	68 df       	rcall	.-304    	; 0x356 <LCD_WriteCommand>
 486:	00 00       	nop
 488:	0f 90       	pop	r0
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <delay_ms>:
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	00 d0       	rcall	.+0      	; 0x496 <delay_ms+0x6>
 496:	00 d0       	rcall	.+0      	; 0x498 <delay_ms+0x8>
 498:	00 d0       	rcall	.+0      	; 0x49a <delay_ms+0xa>
 49a:	cd b7       	in	r28, 0x3d	; 61
 49c:	de b7       	in	r29, 0x3e	; 62
 49e:	9e 83       	std	Y+6, r25	; 0x06
 4a0:	8d 83       	std	Y+5, r24	; 0x05
 4a2:	1a 82       	std	Y+2, r1	; 0x02
 4a4:	19 82       	std	Y+1, r1	; 0x01
 4a6:	13 c0       	rjmp	.+38     	; 0x4ce <delay_ms+0x3e>
 4a8:	1c 82       	std	Y+4, r1	; 0x04
 4aa:	1b 82       	std	Y+3, r1	; 0x03
 4ac:	06 c0       	rjmp	.+12     	; 0x4ba <delay_ms+0x2a>
 4ae:	00 00       	nop
 4b0:	8b 81       	ldd	r24, Y+3	; 0x03
 4b2:	9c 81       	ldd	r25, Y+4	; 0x04
 4b4:	01 96       	adiw	r24, 0x01	; 1
 4b6:	9c 83       	std	Y+4, r25	; 0x04
 4b8:	8b 83       	std	Y+3, r24	; 0x03
 4ba:	8b 81       	ldd	r24, Y+3	; 0x03
 4bc:	9c 81       	ldd	r25, Y+4	; 0x04
 4be:	87 30       	cpi	r24, 0x07	; 7
 4c0:	93 40       	sbci	r25, 0x03	; 3
 4c2:	ac f3       	brlt	.-22     	; 0x4ae <delay_ms+0x1e>
 4c4:	89 81       	ldd	r24, Y+1	; 0x01
 4c6:	9a 81       	ldd	r25, Y+2	; 0x02
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	9a 83       	std	Y+2, r25	; 0x02
 4cc:	89 83       	std	Y+1, r24	; 0x01
 4ce:	29 81       	ldd	r18, Y+1	; 0x01
 4d0:	3a 81       	ldd	r19, Y+2	; 0x02
 4d2:	8d 81       	ldd	r24, Y+5	; 0x05
 4d4:	9e 81       	ldd	r25, Y+6	; 0x06
 4d6:	28 17       	cp	r18, r24
 4d8:	39 07       	cpc	r19, r25
 4da:	34 f3       	brlt	.-52     	; 0x4a8 <delay_ms+0x18>
 4dc:	00 00       	nop
 4de:	26 96       	adiw	r28, 0x06	; 6
 4e0:	0f b6       	in	r0, 0x3f	; 63
 4e2:	f8 94       	cli
 4e4:	de bf       	out	0x3e, r29	; 62
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	cd bf       	out	0x3d, r28	; 61
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	08 95       	ret

000004f0 <TimerOn>:
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	cd b7       	in	r28, 0x3d	; 61
 4f6:	de b7       	in	r29, 0x3e	; 62
 4f8:	81 e8       	ldi	r24, 0x81	; 129
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	2b e0       	ldi	r18, 0x0B	; 11
 4fe:	fc 01       	movw	r30, r24
 500:	20 83       	st	Z, r18
 502:	88 e8       	ldi	r24, 0x88	; 136
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	2d e7       	ldi	r18, 0x7D	; 125
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	fc 01       	movw	r30, r24
 50c:	31 83       	std	Z+1, r19	; 0x01
 50e:	20 83       	st	Z, r18
 510:	8f e6       	ldi	r24, 0x6F	; 111
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	22 e0       	ldi	r18, 0x02	; 2
 516:	fc 01       	movw	r30, r24
 518:	20 83       	st	Z, r18
 51a:	84 e8       	ldi	r24, 0x84	; 132
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	fc 01       	movw	r30, r24
 520:	11 82       	std	Z+1, r1	; 0x01
 522:	10 82       	st	Z, r1
 524:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 528:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 52c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 530:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 534:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 538:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 53c:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <__data_end+0x2>
 540:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <__data_end+0x3>
 544:	8f e5       	ldi	r24, 0x5F	; 95
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	2f e5       	ldi	r18, 0x5F	; 95
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	f9 01       	movw	r30, r18
 54e:	20 81       	ld	r18, Z
 550:	20 68       	ori	r18, 0x80	; 128
 552:	fc 01       	movw	r30, r24
 554:	20 83       	st	Z, r18
 556:	00 00       	nop
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	08 95       	ret

0000055e <TimerSet>:



void TimerSet(unsigned long M)
{
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	00 d0       	rcall	.+0      	; 0x564 <TimerSet+0x6>
 564:	00 d0       	rcall	.+0      	; 0x566 <TimerSet+0x8>
 566:	cd b7       	in	r28, 0x3d	; 61
 568:	de b7       	in	r29, 0x3e	; 62
 56a:	69 83       	std	Y+1, r22	; 0x01
 56c:	7a 83       	std	Y+2, r23	; 0x02
 56e:	8b 83       	std	Y+3, r24	; 0x03
 570:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
 572:	89 81       	ldd	r24, Y+1	; 0x01
 574:	9a 81       	ldd	r25, Y+2	; 0x02
 576:	ab 81       	ldd	r26, Y+3	; 0x03
 578:	bc 81       	ldd	r27, Y+4	; 0x04
 57a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 57e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 582:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 586:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 58a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 58e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 592:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 596:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 59a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 59e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 5a2:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <__data_end+0x2>
 5a6:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <__data_end+0x3>
}
 5aa:	00 00       	nop
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	0f 90       	pop	r0
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	08 95       	ret

000005ba <TimerISR>:

void TimerISR()
{
 5ba:	0f 93       	push	r16
 5bc:	1f 93       	push	r17
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	1f 92       	push	r1
 5c4:	cd b7       	in	r28, 0x3d	; 61
 5c6:	de b7       	in	r29, 0x3e	; 62
	unsigned char i;
	for(i = 0; i < tasksNum; ++i)
 5c8:	19 82       	std	Y+1, r1	; 0x01
 5ca:	a4 c0       	rjmp	.+328    	; 0x714 <TimerISR+0x15a>
	{
		if(tasks[i].elapsedTime >= tasks[i].period)
 5cc:	89 81       	ldd	r24, Y+1	; 0x01
 5ce:	28 2f       	mov	r18, r24
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	c9 01       	movw	r24, r18
 5d4:	88 0f       	add	r24, r24
 5d6:	99 1f       	adc	r25, r25
 5d8:	82 0f       	add	r24, r18
 5da:	93 1f       	adc	r25, r19
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	8f 5d       	subi	r24, 0xDF	; 223
 5e6:	9e 4f       	sbci	r25, 0xFE	; 254
 5e8:	fc 01       	movw	r30, r24
 5ea:	20 81       	ld	r18, Z
 5ec:	31 81       	ldd	r19, Z+1	; 0x01
 5ee:	42 81       	ldd	r20, Z+2	; 0x02
 5f0:	53 81       	ldd	r21, Z+3	; 0x03
 5f2:	89 81       	ldd	r24, Y+1	; 0x01
 5f4:	68 2f       	mov	r22, r24
 5f6:	70 e0       	ldi	r23, 0x00	; 0
 5f8:	cb 01       	movw	r24, r22
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	86 0f       	add	r24, r22
 600:	97 1f       	adc	r25, r23
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	83 5e       	subi	r24, 0xE3	; 227
 60c:	9e 4f       	sbci	r25, 0xFE	; 254
 60e:	fc 01       	movw	r30, r24
 610:	80 81       	ld	r24, Z
 612:	91 81       	ldd	r25, Z+1	; 0x01
 614:	a2 81       	ldd	r26, Z+2	; 0x02
 616:	b3 81       	ldd	r27, Z+3	; 0x03
 618:	28 17       	cp	r18, r24
 61a:	39 07       	cpc	r19, r25
 61c:	4a 07       	cpc	r20, r26
 61e:	5b 07       	cpc	r21, r27
 620:	08 f4       	brcc	.+2      	; 0x624 <TimerISR+0x6a>
 622:	49 c0       	rjmp	.+146    	; 0x6b6 <TimerISR+0xfc>
		{
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 624:	89 81       	ldd	r24, Y+1	; 0x01
 626:	08 2f       	mov	r16, r24
 628:	10 e0       	ldi	r17, 0x00	; 0
 62a:	89 81       	ldd	r24, Y+1	; 0x01
 62c:	28 2f       	mov	r18, r24
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	c9 01       	movw	r24, r18
 632:	88 0f       	add	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	82 0f       	add	r24, r18
 638:	93 1f       	adc	r25, r19
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	88 0f       	add	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	8b 5d       	subi	r24, 0xDB	; 219
 644:	9e 4f       	sbci	r25, 0xFE	; 254
 646:	fc 01       	movw	r30, r24
 648:	40 81       	ld	r20, Z
 64a:	51 81       	ldd	r21, Z+1	; 0x01
 64c:	89 81       	ldd	r24, Y+1	; 0x01
 64e:	28 2f       	mov	r18, r24
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	c9 01       	movw	r24, r18
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	82 0f       	add	r24, r18
 65a:	93 1f       	adc	r25, r19
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	88 0f       	add	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	85 5e       	subi	r24, 0xE5	; 229
 666:	9e 4f       	sbci	r25, 0xFE	; 254
 668:	fc 01       	movw	r30, r24
 66a:	80 81       	ld	r24, Z
 66c:	91 81       	ldd	r25, Z+1	; 0x01
 66e:	fa 01       	movw	r30, r20
 670:	09 95       	icall
 672:	9c 01       	movw	r18, r24
 674:	c8 01       	movw	r24, r16
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	80 0f       	add	r24, r16
 67c:	91 1f       	adc	r25, r17
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	88 0f       	add	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	85 5e       	subi	r24, 0xE5	; 229
 688:	9e 4f       	sbci	r25, 0xFE	; 254
 68a:	fc 01       	movw	r30, r24
 68c:	31 83       	std	Z+1, r19	; 0x01
 68e:	20 83       	st	Z, r18
			tasks[i].elapsedTime = 0;
 690:	89 81       	ldd	r24, Y+1	; 0x01
 692:	28 2f       	mov	r18, r24
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	c9 01       	movw	r24, r18
 698:	88 0f       	add	r24, r24
 69a:	99 1f       	adc	r25, r25
 69c:	82 0f       	add	r24, r18
 69e:	93 1f       	adc	r25, r19
 6a0:	88 0f       	add	r24, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	8f 5d       	subi	r24, 0xDF	; 223
 6aa:	9e 4f       	sbci	r25, 0xFE	; 254
 6ac:	fc 01       	movw	r30, r24
 6ae:	10 82       	st	Z, r1
 6b0:	11 82       	std	Z+1, r1	; 0x01
 6b2:	12 82       	std	Z+2, r1	; 0x02
 6b4:	13 82       	std	Z+3, r1	; 0x03
		}
		tasks[i].elapsedTime += 1;
 6b6:	89 81       	ldd	r24, Y+1	; 0x01
 6b8:	68 2f       	mov	r22, r24
 6ba:	70 e0       	ldi	r23, 0x00	; 0
 6bc:	89 81       	ldd	r24, Y+1	; 0x01
 6be:	28 2f       	mov	r18, r24
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	c9 01       	movw	r24, r18
 6c4:	88 0f       	add	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	82 0f       	add	r24, r18
 6ca:	93 1f       	adc	r25, r19
 6cc:	88 0f       	add	r24, r24
 6ce:	99 1f       	adc	r25, r25
 6d0:	88 0f       	add	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	8f 5d       	subi	r24, 0xDF	; 223
 6d6:	9e 4f       	sbci	r25, 0xFE	; 254
 6d8:	fc 01       	movw	r30, r24
 6da:	80 81       	ld	r24, Z
 6dc:	91 81       	ldd	r25, Z+1	; 0x01
 6de:	a2 81       	ldd	r26, Z+2	; 0x02
 6e0:	b3 81       	ldd	r27, Z+3	; 0x03
 6e2:	9c 01       	movw	r18, r24
 6e4:	ad 01       	movw	r20, r26
 6e6:	2f 5f       	subi	r18, 0xFF	; 255
 6e8:	3f 4f       	sbci	r19, 0xFF	; 255
 6ea:	4f 4f       	sbci	r20, 0xFF	; 255
 6ec:	5f 4f       	sbci	r21, 0xFF	; 255
 6ee:	cb 01       	movw	r24, r22
 6f0:	88 0f       	add	r24, r24
 6f2:	99 1f       	adc	r25, r25
 6f4:	86 0f       	add	r24, r22
 6f6:	97 1f       	adc	r25, r23
 6f8:	88 0f       	add	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	88 0f       	add	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	8f 5d       	subi	r24, 0xDF	; 223
 702:	9e 4f       	sbci	r25, 0xFE	; 254
 704:	fc 01       	movw	r30, r24
 706:	20 83       	st	Z, r18
 708:	31 83       	std	Z+1, r19	; 0x01
 70a:	42 83       	std	Z+2, r20	; 0x02
 70c:	53 83       	std	Z+3, r21	; 0x03
}

void TimerISR()
{
	unsigned char i;
	for(i = 0; i < tasksNum; ++i)
 70e:	89 81       	ldd	r24, Y+1	; 0x01
 710:	8f 5f       	subi	r24, 0xFF	; 255
 712:	89 83       	std	Y+1, r24	; 0x01
 714:	83 e0       	ldi	r24, 0x03	; 3
 716:	99 81       	ldd	r25, Y+1	; 0x01
 718:	98 17       	cp	r25, r24
 71a:	08 f4       	brcc	.+2      	; 0x71e <TimerISR+0x164>
 71c:	57 cf       	rjmp	.-338    	; 0x5cc <TimerISR+0x12>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += 1;
	}
}
 71e:	00 00       	nop
 720:	0f 90       	pop	r0
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	1f 91       	pop	r17
 728:	0f 91       	pop	r16
 72a:	08 95       	ret

0000072c <__vector_13>:

ISR(TIMER1_COMPA_vect) {
 72c:	1f 92       	push	r1
 72e:	0f 92       	push	r0
 730:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 734:	0f 92       	push	r0
 736:	11 24       	eor	r1, r1
 738:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 73c:	0f 92       	push	r0
 73e:	2f 93       	push	r18
 740:	3f 93       	push	r19
 742:	4f 93       	push	r20
 744:	5f 93       	push	r21
 746:	6f 93       	push	r22
 748:	7f 93       	push	r23
 74a:	8f 93       	push	r24
 74c:	9f 93       	push	r25
 74e:	af 93       	push	r26
 750:	bf 93       	push	r27
 752:	ef 93       	push	r30
 754:	ff 93       	push	r31
 756:	cf 93       	push	r28
 758:	df 93       	push	r29
 75a:	cd b7       	in	r28, 0x3d	; 61
 75c:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 75e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 762:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 766:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <__data_end+0x2>
 76a:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <__data_end+0x3>
 76e:	01 97       	sbiw	r24, 0x01	; 1
 770:	a1 09       	sbc	r26, r1
 772:	b1 09       	sbc	r27, r1
 774:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 778:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 77c:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <__data_end+0x2>
 780:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 784:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 788:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 78c:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <__data_end+0x2>
 790:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <__data_end+0x3>
 794:	89 2b       	or	r24, r25
 796:	8a 2b       	or	r24, r26
 798:	8b 2b       	or	r24, r27
 79a:	89 f4       	brne	.+34     	; 0x7be <__vector_13+0x92>
		TimerISR(); // Call the ISR that the user uses
 79c:	0e df       	rcall	.-484    	; 0x5ba <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 79e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 7a6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 7aa:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 7ae:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 7b2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 7b6:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <__data_end+0x2>
 7ba:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <__data_end+0x3>
	}
}
 7be:	00 00       	nop
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	ff 91       	pop	r31
 7c6:	ef 91       	pop	r30
 7c8:	bf 91       	pop	r27
 7ca:	af 91       	pop	r26
 7cc:	9f 91       	pop	r25
 7ce:	8f 91       	pop	r24
 7d0:	7f 91       	pop	r23
 7d2:	6f 91       	pop	r22
 7d4:	5f 91       	pop	r21
 7d6:	4f 91       	pop	r20
 7d8:	3f 91       	pop	r19
 7da:	2f 91       	pop	r18
 7dc:	0f 90       	pop	r0
 7de:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 7e2:	0f 90       	pop	r0
 7e4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 7e8:	0f 90       	pop	r0
 7ea:	1f 90       	pop	r1
 7ec:	18 95       	reti

000007ee <TickFct_kp>:
PC2 3   7 | 8 | 9 | C
PC3 4   * | 0 | # | D
*/
enum kpStates{kp_start, kp_ready, kp_wait};
int TickFct_kp(int state)
{
 7ee:	cf 93       	push	r28
 7f0:	df 93       	push	r29
 7f2:	00 d0       	rcall	.+0      	; 0x7f4 <TickFct_kp+0x6>
 7f4:	cd b7       	in	r28, 0x3d	; 61
 7f6:	de b7       	in	r29, 0x3e	; 62
 7f8:	9a 83       	std	Y+2, r25	; 0x02
 7fa:	89 83       	std	Y+1, r24	; 0x01
	static unsigned char x;
	switch(state)
 7fc:	89 81       	ldd	r24, Y+1	; 0x01
 7fe:	9a 81       	ldd	r25, Y+2	; 0x02
 800:	81 30       	cpi	r24, 0x01	; 1
 802:	91 05       	cpc	r25, r1
 804:	79 f0       	breq	.+30     	; 0x824 <TickFct_kp+0x36>
 806:	82 30       	cpi	r24, 0x02	; 2
 808:	91 05       	cpc	r25, r1
 80a:	e1 f0       	breq	.+56     	; 0x844 <TickFct_kp+0x56>
 80c:	89 2b       	or	r24, r25
 80e:	09 f0       	breq	.+2      	; 0x812 <TickFct_kp+0x24>
			}
			writeBool = 1;
			state = kp_start;
			break;
		
		default: break;
 810:	29 c0       	rjmp	.+82     	; 0x864 <TickFct_kp+0x76>
{
	static unsigned char x;
	switch(state)
	{
		case kp_start:
			writeBool = 0;
 812:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <writeBool>
			write = '\0';
 816:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <write>
			state = kp_ready;
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	9a 83       	std	Y+2, r25	; 0x02
 820:	89 83       	std	Y+1, r24	; 0x01
			break;
 822:	20 c0       	rjmp	.+64     	; 0x864 <TickFct_kp+0x76>
		
		case kp_ready:
			x = GetKeypadKey();
 824:	98 dc       	rcall	.-1744   	; 0x156 <GetKeypadKey>
 826:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <x.1901>
			if(x != '\0')
 82a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <x.1901>
 82e:	88 23       	and	r24, r24
 830:	b1 f0       	breq	.+44     	; 0x85e <TickFct_kp+0x70>
			{
				write = x;
 832:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <x.1901>
 836:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <write>
				state = kp_wait;
 83a:	82 e0       	ldi	r24, 0x02	; 2
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	9a 83       	std	Y+2, r25	; 0x02
 840:	89 83       	std	Y+1, r24	; 0x01
				break;
			}	
			break;
		
		case kp_wait:
			x = GetKeypadKey();
 842:	10 c0       	rjmp	.+32     	; 0x864 <TickFct_kp+0x76>
 844:	88 dc       	rcall	.-1776   	; 0x156 <GetKeypadKey>
 846:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <x.1901>
			if(x != '\0')
 84a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <x.1901>
 84e:	88 23       	and	r24, r24
 850:	41 f4       	brne	.+16     	; 0x862 <TickFct_kp+0x74>
			{
				break;
			}
			writeBool = 1;
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <writeBool>
			state = kp_start;
 858:	1a 82       	std	Y+2, r1	; 0x02
 85a:	19 82       	std	Y+1, r1	; 0x01
			break;
 85c:	03 c0       	rjmp	.+6      	; 0x864 <TickFct_kp+0x76>
			{
				write = x;
				state = kp_wait;
				break;
			}	
			break;
 85e:	00 00       	nop
 860:	01 c0       	rjmp	.+2      	; 0x864 <TickFct_kp+0x76>
		
		case kp_wait:
			x = GetKeypadKey();
			if(x != '\0')
			{
				break;
 862:	00 00       	nop
			break;
		
		default: break;
			
	}
	return state;
 864:	89 81       	ldd	r24, Y+1	; 0x01
 866:	9a 81       	ldd	r25, Y+2	; 0x02
}
 868:	0f 90       	pop	r0
 86a:	0f 90       	pop	r0
 86c:	df 91       	pop	r29
 86e:	cf 91       	pop	r28
 870:	08 95       	ret

00000872 <TickFct_cursor>:

enum cursorStates{cursor_start, cursor_count};
int TickFct_cursor(int state)
{
 872:	cf 93       	push	r28
 874:	df 93       	push	r29
 876:	00 d0       	rcall	.+0      	; 0x878 <TickFct_cursor+0x6>
 878:	cd b7       	in	r28, 0x3d	; 61
 87a:	de b7       	in	r29, 0x3e	; 62
 87c:	9a 83       	std	Y+2, r25	; 0x02
 87e:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
 880:	89 81       	ldd	r24, Y+1	; 0x01
 882:	9a 81       	ldd	r25, Y+2	; 0x02
 884:	00 97       	sbiw	r24, 0x00	; 0
 886:	19 f0       	breq	.+6      	; 0x88e <TickFct_cursor+0x1c>
 888:	01 97       	sbiw	r24, 0x01	; 1
 88a:	41 f0       	breq	.+16     	; 0x89c <TickFct_cursor+0x2a>
 88c:	17 c0       	rjmp	.+46     	; 0x8bc <TickFct_cursor+0x4a>
	{
		case cursor_start:
			cursorIndex = 0;
 88e:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <cursorIndex>
			state = cursor_count;
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	9a 83       	std	Y+2, r25	; 0x02
 898:	89 83       	std	Y+1, r24	; 0x01
			break;
 89a:	10 c0       	rjmp	.+32     	; 0x8bc <TickFct_cursor+0x4a>
		
		case cursor_count:
			if(writeBool)
 89c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <writeBool>
 8a0:	88 23       	and	r24, r24
 8a2:	59 f0       	breq	.+22     	; 0x8ba <TickFct_cursor+0x48>
			{
				if(cursorIndex > 15)
 8a4:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <cursorIndex>
 8a8:	80 31       	cpi	r24, 0x10	; 16
 8aa:	10 f0       	brcs	.+4      	; 0x8b0 <TickFct_cursor+0x3e>
				{
					cursorIndex = 0;
 8ac:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <cursorIndex>
				}
				cursorIndex += 1;
 8b0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <cursorIndex>
 8b4:	8f 5f       	subi	r24, 0xFF	; 255
 8b6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <cursorIndex>
			}
			break;
 8ba:	00 00       	nop
			
	}
	return state;
 8bc:	89 81       	ldd	r24, Y+1	; 0x01
 8be:	9a 81       	ldd	r25, Y+2	; 0x02
}
 8c0:	0f 90       	pop	r0
 8c2:	0f 90       	pop	r0
 8c4:	df 91       	pop	r29
 8c6:	cf 91       	pop	r28
 8c8:	08 95       	ret

000008ca <TickFct_combine>:

enum combineStates{combine_start};
int TickFct_combine(int state)
{
 8ca:	cf 93       	push	r28
 8cc:	df 93       	push	r29
 8ce:	00 d0       	rcall	.+0      	; 0x8d0 <TickFct_combine+0x6>
 8d0:	cd b7       	in	r28, 0x3d	; 61
 8d2:	de b7       	in	r29, 0x3e	; 62
 8d4:	9a 83       	std	Y+2, r25	; 0x02
 8d6:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
 8d8:	89 81       	ldd	r24, Y+1	; 0x01
 8da:	9a 81       	ldd	r25, Y+2	; 0x02
 8dc:	89 2b       	or	r24, r25
 8de:	59 f4       	brne	.+22     	; 0x8f6 <TickFct_combine+0x2c>
	{
		case combine_start:
			if(writeBool)
 8e0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <writeBool>
 8e4:	88 23       	and	r24, r24
 8e6:	31 f0       	breq	.+12     	; 0x8f4 <TickFct_combine+0x2a>
			{
				LCD_Cursor(cursorIndex);
 8e8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <cursorIndex>
 8ec:	bc dd       	rcall	.-1160   	; 0x466 <LCD_Cursor>
				LCD_WriteData(write);
 8ee:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <write>
 8f2:	60 dd       	rcall	.-1344   	; 0x3b4 <LCD_WriteData>
			}
			break;
 8f4:	00 00       	nop
	}
	return state;
 8f6:	89 81       	ldd	r24, Y+1	; 0x01
 8f8:	9a 81       	ldd	r25, Y+2	; 0x02
}
 8fa:	0f 90       	pop	r0
 8fc:	0f 90       	pop	r0
 8fe:	df 91       	pop	r29
 900:	cf 91       	pop	r28
 902:	08 95       	ret

00000904 <main>:

const unsigned char stringSize = 16;
int main(void)
{
 904:	cf 93       	push	r28
 906:	df 93       	push	r29
 908:	1f 92       	push	r1
 90a:	cd b7       	in	r28, 0x3d	; 61
 90c:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
 90e:	84 e2       	ldi	r24, 0x24	; 36
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	2f ef       	ldi	r18, 0xFF	; 255
 914:	fc 01       	movw	r30, r24
 916:	20 83       	st	Z, r18
 918:	85 e2       	ldi	r24, 0x25	; 37
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	fc 01       	movw	r30, r24
 91e:	10 82       	st	Z, r1
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 920:	87 e2       	ldi	r24, 0x27	; 39
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	20 ef       	ldi	r18, 0xF0	; 240
 926:	fc 01       	movw	r30, r24
 928:	20 83       	st	Z, r18
 92a:	88 e2       	ldi	r24, 0x28	; 40
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	2f e0       	ldi	r18, 0x0F	; 15
 930:	fc 01       	movw	r30, r24
 932:	20 83       	st	Z, r18
	DDRD = 0xFF; PORTD = 0x00;
 934:	8a e2       	ldi	r24, 0x2A	; 42
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	2f ef       	ldi	r18, 0xFF	; 255
 93a:	fc 01       	movw	r30, r24
 93c:	20 83       	st	Z, r18
 93e:	8b e2       	ldi	r24, 0x2B	; 43
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	fc 01       	movw	r30, r24
 944:	10 82       	st	Z, r1
	DDRA = 0xFF; PORTA = 0x00;
 946:	81 e2       	ldi	r24, 0x21	; 33
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	2f ef       	ldi	r18, 0xFF	; 255
 94c:	fc 01       	movw	r30, r24
 94e:	20 83       	st	Z, r18
 950:	82 e2       	ldi	r24, 0x22	; 34
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	fc 01       	movw	r30, r24
 956:	10 82       	st	Z, r1
	LCD_init();
 958:	e8 dc       	rcall	.-1584   	; 0x32a <LCD_init>
	LCD_DisplayString(1,"Congratulations!"); // 16 size
 95a:	64 e0       	ldi	r22, 0x04	; 4
 95c:	71 e0       	ldi	r23, 0x01	; 1
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	58 dd       	rcall	.-1360   	; 0x412 <LCD_DisplayString>
	unsigned char i = 0;
 962:	19 82       	std	Y+1, r1	; 0x01
	tasks[i].state = kp_start;
 964:	89 81       	ldd	r24, Y+1	; 0x01
 966:	28 2f       	mov	r18, r24
 968:	30 e0       	ldi	r19, 0x00	; 0
 96a:	c9 01       	movw	r24, r18
 96c:	88 0f       	add	r24, r24
 96e:	99 1f       	adc	r25, r25
 970:	82 0f       	add	r24, r18
 972:	93 1f       	adc	r25, r19
 974:	88 0f       	add	r24, r24
 976:	99 1f       	adc	r25, r25
 978:	88 0f       	add	r24, r24
 97a:	99 1f       	adc	r25, r25
 97c:	85 5e       	subi	r24, 0xE5	; 229
 97e:	9e 4f       	sbci	r25, 0xFE	; 254
 980:	fc 01       	movw	r30, r24
 982:	11 82       	std	Z+1, r1	; 0x01
 984:	10 82       	st	Z, r1
	tasks[i].period = 1;
 986:	89 81       	ldd	r24, Y+1	; 0x01
 988:	28 2f       	mov	r18, r24
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	c9 01       	movw	r24, r18
 98e:	88 0f       	add	r24, r24
 990:	99 1f       	adc	r25, r25
 992:	82 0f       	add	r24, r18
 994:	93 1f       	adc	r25, r19
 996:	88 0f       	add	r24, r24
 998:	99 1f       	adc	r25, r25
 99a:	88 0f       	add	r24, r24
 99c:	99 1f       	adc	r25, r25
 99e:	9c 01       	movw	r18, r24
 9a0:	23 5e       	subi	r18, 0xE3	; 227
 9a2:	3e 4f       	sbci	r19, 0xFE	; 254
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	a0 e0       	ldi	r26, 0x00	; 0
 9aa:	b0 e0       	ldi	r27, 0x00	; 0
 9ac:	f9 01       	movw	r30, r18
 9ae:	80 83       	st	Z, r24
 9b0:	91 83       	std	Z+1, r25	; 0x01
 9b2:	a2 83       	std	Z+2, r26	; 0x02
 9b4:	b3 83       	std	Z+3, r27	; 0x03
	tasks[i].TickFct = &TickFct_kp;
 9b6:	89 81       	ldd	r24, Y+1	; 0x01
 9b8:	28 2f       	mov	r18, r24
 9ba:	30 e0       	ldi	r19, 0x00	; 0
 9bc:	c9 01       	movw	r24, r18
 9be:	88 0f       	add	r24, r24
 9c0:	99 1f       	adc	r25, r25
 9c2:	82 0f       	add	r24, r18
 9c4:	93 1f       	adc	r25, r19
 9c6:	88 0f       	add	r24, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	88 0f       	add	r24, r24
 9cc:	99 1f       	adc	r25, r25
 9ce:	8b 5d       	subi	r24, 0xDB	; 219
 9d0:	9e 4f       	sbci	r25, 0xFE	; 254
 9d2:	27 ef       	ldi	r18, 0xF7	; 247
 9d4:	33 e0       	ldi	r19, 0x03	; 3
 9d6:	fc 01       	movw	r30, r24
 9d8:	31 83       	std	Z+1, r19	; 0x01
 9da:	20 83       	st	Z, r18
	i++;
 9dc:	89 81       	ldd	r24, Y+1	; 0x01
 9de:	8f 5f       	subi	r24, 0xFF	; 255
 9e0:	89 83       	std	Y+1, r24	; 0x01
	tasks[i].state = cursor_start;
 9e2:	89 81       	ldd	r24, Y+1	; 0x01
 9e4:	28 2f       	mov	r18, r24
 9e6:	30 e0       	ldi	r19, 0x00	; 0
 9e8:	c9 01       	movw	r24, r18
 9ea:	88 0f       	add	r24, r24
 9ec:	99 1f       	adc	r25, r25
 9ee:	82 0f       	add	r24, r18
 9f0:	93 1f       	adc	r25, r19
 9f2:	88 0f       	add	r24, r24
 9f4:	99 1f       	adc	r25, r25
 9f6:	88 0f       	add	r24, r24
 9f8:	99 1f       	adc	r25, r25
 9fa:	85 5e       	subi	r24, 0xE5	; 229
 9fc:	9e 4f       	sbci	r25, 0xFE	; 254
 9fe:	fc 01       	movw	r30, r24
 a00:	11 82       	std	Z+1, r1	; 0x01
 a02:	10 82       	st	Z, r1
	tasks[i].period = 1;
 a04:	89 81       	ldd	r24, Y+1	; 0x01
 a06:	28 2f       	mov	r18, r24
 a08:	30 e0       	ldi	r19, 0x00	; 0
 a0a:	c9 01       	movw	r24, r18
 a0c:	88 0f       	add	r24, r24
 a0e:	99 1f       	adc	r25, r25
 a10:	82 0f       	add	r24, r18
 a12:	93 1f       	adc	r25, r19
 a14:	88 0f       	add	r24, r24
 a16:	99 1f       	adc	r25, r25
 a18:	88 0f       	add	r24, r24
 a1a:	99 1f       	adc	r25, r25
 a1c:	9c 01       	movw	r18, r24
 a1e:	23 5e       	subi	r18, 0xE3	; 227
 a20:	3e 4f       	sbci	r19, 0xFE	; 254
 a22:	81 e0       	ldi	r24, 0x01	; 1
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	a0 e0       	ldi	r26, 0x00	; 0
 a28:	b0 e0       	ldi	r27, 0x00	; 0
 a2a:	f9 01       	movw	r30, r18
 a2c:	80 83       	st	Z, r24
 a2e:	91 83       	std	Z+1, r25	; 0x01
 a30:	a2 83       	std	Z+2, r26	; 0x02
 a32:	b3 83       	std	Z+3, r27	; 0x03
	tasks[i].TickFct = &TickFct_cursor;
 a34:	89 81       	ldd	r24, Y+1	; 0x01
 a36:	28 2f       	mov	r18, r24
 a38:	30 e0       	ldi	r19, 0x00	; 0
 a3a:	c9 01       	movw	r24, r18
 a3c:	88 0f       	add	r24, r24
 a3e:	99 1f       	adc	r25, r25
 a40:	82 0f       	add	r24, r18
 a42:	93 1f       	adc	r25, r19
 a44:	88 0f       	add	r24, r24
 a46:	99 1f       	adc	r25, r25
 a48:	88 0f       	add	r24, r24
 a4a:	99 1f       	adc	r25, r25
 a4c:	8b 5d       	subi	r24, 0xDB	; 219
 a4e:	9e 4f       	sbci	r25, 0xFE	; 254
 a50:	29 e3       	ldi	r18, 0x39	; 57
 a52:	34 e0       	ldi	r19, 0x04	; 4
 a54:	fc 01       	movw	r30, r24
 a56:	31 83       	std	Z+1, r19	; 0x01
 a58:	20 83       	st	Z, r18
	++i;
 a5a:	89 81       	ldd	r24, Y+1	; 0x01
 a5c:	8f 5f       	subi	r24, 0xFF	; 255
 a5e:	89 83       	std	Y+1, r24	; 0x01
	tasks[i].state = combine_start;
 a60:	89 81       	ldd	r24, Y+1	; 0x01
 a62:	28 2f       	mov	r18, r24
 a64:	30 e0       	ldi	r19, 0x00	; 0
 a66:	c9 01       	movw	r24, r18
 a68:	88 0f       	add	r24, r24
 a6a:	99 1f       	adc	r25, r25
 a6c:	82 0f       	add	r24, r18
 a6e:	93 1f       	adc	r25, r19
 a70:	88 0f       	add	r24, r24
 a72:	99 1f       	adc	r25, r25
 a74:	88 0f       	add	r24, r24
 a76:	99 1f       	adc	r25, r25
 a78:	85 5e       	subi	r24, 0xE5	; 229
 a7a:	9e 4f       	sbci	r25, 0xFE	; 254
 a7c:	fc 01       	movw	r30, r24
 a7e:	11 82       	std	Z+1, r1	; 0x01
 a80:	10 82       	st	Z, r1
	tasks[i].period = 1;
 a82:	89 81       	ldd	r24, Y+1	; 0x01
 a84:	28 2f       	mov	r18, r24
 a86:	30 e0       	ldi	r19, 0x00	; 0
 a88:	c9 01       	movw	r24, r18
 a8a:	88 0f       	add	r24, r24
 a8c:	99 1f       	adc	r25, r25
 a8e:	82 0f       	add	r24, r18
 a90:	93 1f       	adc	r25, r19
 a92:	88 0f       	add	r24, r24
 a94:	99 1f       	adc	r25, r25
 a96:	88 0f       	add	r24, r24
 a98:	99 1f       	adc	r25, r25
 a9a:	9c 01       	movw	r18, r24
 a9c:	23 5e       	subi	r18, 0xE3	; 227
 a9e:	3e 4f       	sbci	r19, 0xFE	; 254
 aa0:	81 e0       	ldi	r24, 0x01	; 1
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	a0 e0       	ldi	r26, 0x00	; 0
 aa6:	b0 e0       	ldi	r27, 0x00	; 0
 aa8:	f9 01       	movw	r30, r18
 aaa:	80 83       	st	Z, r24
 aac:	91 83       	std	Z+1, r25	; 0x01
 aae:	a2 83       	std	Z+2, r26	; 0x02
 ab0:	b3 83       	std	Z+3, r27	; 0x03
	tasks[i].TickFct = &TickFct_combine;
 ab2:	89 81       	ldd	r24, Y+1	; 0x01
 ab4:	28 2f       	mov	r18, r24
 ab6:	30 e0       	ldi	r19, 0x00	; 0
 ab8:	c9 01       	movw	r24, r18
 aba:	88 0f       	add	r24, r24
 abc:	99 1f       	adc	r25, r25
 abe:	82 0f       	add	r24, r18
 ac0:	93 1f       	adc	r25, r19
 ac2:	88 0f       	add	r24, r24
 ac4:	99 1f       	adc	r25, r25
 ac6:	88 0f       	add	r24, r24
 ac8:	99 1f       	adc	r25, r25
 aca:	8b 5d       	subi	r24, 0xDB	; 219
 acc:	9e 4f       	sbci	r25, 0xFE	; 254
 ace:	25 e6       	ldi	r18, 0x65	; 101
 ad0:	34 e0       	ldi	r19, 0x04	; 4
 ad2:	fc 01       	movw	r30, r24
 ad4:	31 83       	std	Z+1, r19	; 0x01
 ad6:	20 83       	st	Z, r18
	TimerSet(1);
 ad8:	61 e0       	ldi	r22, 0x01	; 1
 ada:	70 e0       	ldi	r23, 0x00	; 0
 adc:	80 e0       	ldi	r24, 0x00	; 0
 ade:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 ae0:	3e dd       	rcall	.-1412   	; 0x55e <TimerSet>
 ae2:	06 dd       	rcall	.-1524   	; 0x4f0 <TimerOn>
	while(1) {
		
	}
 ae4:	ff cf       	rjmp	.-2      	; 0xae4 <main+0x1e0>

00000ae6 <_exit>:
 ae6:	f8 94       	cli

00000ae8 <__stop_program>:
 ae8:	ff cf       	rjmp	.-2      	; 0xae8 <__stop_program>
